
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Credential
 * 
 */
export type Credential = $Result.DefaultSelection<Prisma.$CredentialPayload>
/**
 * Model Ortaggi
 * 
 */
export type Ortaggi = $Result.DefaultSelection<Prisma.$OrtaggiPayload>
/**
 * Model Glossario
 * 
 */
export type Glossario = $Result.DefaultSelection<Prisma.$GlossarioPayload>
/**
 * Model MyOrto
 * 
 */
export type MyOrto = $Result.DefaultSelection<Prisma.$MyOrtoPayload>
/**
 * Model Pianificazioni
 * 
 */
export type Pianificazioni = $Result.DefaultSelection<Prisma.$PianificazioniPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.credential`: Exposes CRUD operations for the **Credential** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Credentials
    * const credentials = await prisma.credential.findMany()
    * ```
    */
  get credential(): Prisma.CredentialDelegate<ExtArgs>;

  /**
   * `prisma.ortaggi`: Exposes CRUD operations for the **Ortaggi** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ortaggis
    * const ortaggis = await prisma.ortaggi.findMany()
    * ```
    */
  get ortaggi(): Prisma.OrtaggiDelegate<ExtArgs>;

  /**
   * `prisma.glossario`: Exposes CRUD operations for the **Glossario** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Glossarios
    * const glossarios = await prisma.glossario.findMany()
    * ```
    */
  get glossario(): Prisma.GlossarioDelegate<ExtArgs>;

  /**
   * `prisma.myOrto`: Exposes CRUD operations for the **MyOrto** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MyOrtos
    * const myOrtos = await prisma.myOrto.findMany()
    * ```
    */
  get myOrto(): Prisma.MyOrtoDelegate<ExtArgs>;

  /**
   * `prisma.pianificazioni`: Exposes CRUD operations for the **Pianificazioni** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Pianificazionis
    * const pianificazionis = await prisma.pianificazioni.findMany()
    * ```
    */
  get pianificazioni(): Prisma.PianificazioniDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.13.0
   * Query Engine version: b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Credential: 'Credential',
    Ortaggi: 'Ortaggi',
    Glossario: 'Glossario',
    MyOrto: 'MyOrto',
    Pianificazioni: 'Pianificazioni'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'credential' | 'ortaggi' | 'glossario' | 'myOrto' | 'pianificazioni'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Credential: {
        payload: Prisma.$CredentialPayload<ExtArgs>
        fields: Prisma.CredentialFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CredentialFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CredentialPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CredentialFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CredentialPayload>
          }
          findFirst: {
            args: Prisma.CredentialFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CredentialPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CredentialFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CredentialPayload>
          }
          findMany: {
            args: Prisma.CredentialFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CredentialPayload>[]
          }
          create: {
            args: Prisma.CredentialCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CredentialPayload>
          }
          createMany: {
            args: Prisma.CredentialCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CredentialDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CredentialPayload>
          }
          update: {
            args: Prisma.CredentialUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CredentialPayload>
          }
          deleteMany: {
            args: Prisma.CredentialDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CredentialUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CredentialUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CredentialPayload>
          }
          aggregate: {
            args: Prisma.CredentialAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCredential>
          }
          groupBy: {
            args: Prisma.CredentialGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CredentialGroupByOutputType>[]
          }
          count: {
            args: Prisma.CredentialCountArgs<ExtArgs>,
            result: $Utils.Optional<CredentialCountAggregateOutputType> | number
          }
        }
      }
      Ortaggi: {
        payload: Prisma.$OrtaggiPayload<ExtArgs>
        fields: Prisma.OrtaggiFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrtaggiFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrtaggiPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrtaggiFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrtaggiPayload>
          }
          findFirst: {
            args: Prisma.OrtaggiFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrtaggiPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrtaggiFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrtaggiPayload>
          }
          findMany: {
            args: Prisma.OrtaggiFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrtaggiPayload>[]
          }
          create: {
            args: Prisma.OrtaggiCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrtaggiPayload>
          }
          createMany: {
            args: Prisma.OrtaggiCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.OrtaggiDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrtaggiPayload>
          }
          update: {
            args: Prisma.OrtaggiUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrtaggiPayload>
          }
          deleteMany: {
            args: Prisma.OrtaggiDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.OrtaggiUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.OrtaggiUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrtaggiPayload>
          }
          aggregate: {
            args: Prisma.OrtaggiAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateOrtaggi>
          }
          groupBy: {
            args: Prisma.OrtaggiGroupByArgs<ExtArgs>,
            result: $Utils.Optional<OrtaggiGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrtaggiCountArgs<ExtArgs>,
            result: $Utils.Optional<OrtaggiCountAggregateOutputType> | number
          }
        }
      }
      Glossario: {
        payload: Prisma.$GlossarioPayload<ExtArgs>
        fields: Prisma.GlossarioFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GlossarioFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GlossarioPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GlossarioFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GlossarioPayload>
          }
          findFirst: {
            args: Prisma.GlossarioFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GlossarioPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GlossarioFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GlossarioPayload>
          }
          findMany: {
            args: Prisma.GlossarioFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GlossarioPayload>[]
          }
          create: {
            args: Prisma.GlossarioCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GlossarioPayload>
          }
          createMany: {
            args: Prisma.GlossarioCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.GlossarioDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GlossarioPayload>
          }
          update: {
            args: Prisma.GlossarioUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GlossarioPayload>
          }
          deleteMany: {
            args: Prisma.GlossarioDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.GlossarioUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.GlossarioUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GlossarioPayload>
          }
          aggregate: {
            args: Prisma.GlossarioAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateGlossario>
          }
          groupBy: {
            args: Prisma.GlossarioGroupByArgs<ExtArgs>,
            result: $Utils.Optional<GlossarioGroupByOutputType>[]
          }
          count: {
            args: Prisma.GlossarioCountArgs<ExtArgs>,
            result: $Utils.Optional<GlossarioCountAggregateOutputType> | number
          }
        }
      }
      MyOrto: {
        payload: Prisma.$MyOrtoPayload<ExtArgs>
        fields: Prisma.MyOrtoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MyOrtoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MyOrtoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MyOrtoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MyOrtoPayload>
          }
          findFirst: {
            args: Prisma.MyOrtoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MyOrtoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MyOrtoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MyOrtoPayload>
          }
          findMany: {
            args: Prisma.MyOrtoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MyOrtoPayload>[]
          }
          create: {
            args: Prisma.MyOrtoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MyOrtoPayload>
          }
          createMany: {
            args: Prisma.MyOrtoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.MyOrtoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MyOrtoPayload>
          }
          update: {
            args: Prisma.MyOrtoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MyOrtoPayload>
          }
          deleteMany: {
            args: Prisma.MyOrtoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.MyOrtoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.MyOrtoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MyOrtoPayload>
          }
          aggregate: {
            args: Prisma.MyOrtoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMyOrto>
          }
          groupBy: {
            args: Prisma.MyOrtoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MyOrtoGroupByOutputType>[]
          }
          count: {
            args: Prisma.MyOrtoCountArgs<ExtArgs>,
            result: $Utils.Optional<MyOrtoCountAggregateOutputType> | number
          }
        }
      }
      Pianificazioni: {
        payload: Prisma.$PianificazioniPayload<ExtArgs>
        fields: Prisma.PianificazioniFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PianificazioniFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PianificazioniPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PianificazioniFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PianificazioniPayload>
          }
          findFirst: {
            args: Prisma.PianificazioniFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PianificazioniPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PianificazioniFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PianificazioniPayload>
          }
          findMany: {
            args: Prisma.PianificazioniFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PianificazioniPayload>[]
          }
          create: {
            args: Prisma.PianificazioniCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PianificazioniPayload>
          }
          createMany: {
            args: Prisma.PianificazioniCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PianificazioniDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PianificazioniPayload>
          }
          update: {
            args: Prisma.PianificazioniUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PianificazioniPayload>
          }
          deleteMany: {
            args: Prisma.PianificazioniDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PianificazioniUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PianificazioniUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PianificazioniPayload>
          }
          aggregate: {
            args: Prisma.PianificazioniAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePianificazioni>
          }
          groupBy: {
            args: Prisma.PianificazioniGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PianificazioniGroupByOutputType>[]
          }
          count: {
            args: Prisma.PianificazioniCountArgs<ExtArgs>,
            result: $Utils.Optional<PianificazioniCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    myorti: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    myorti?: boolean | UserCountOutputTypeCountMyortiArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMyortiArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MyOrtoWhereInput
  }


  /**
   * Count Type OrtaggiCountOutputType
   */

  export type OrtaggiCountOutputType = {
    myorti: number
  }

  export type OrtaggiCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    myorti?: boolean | OrtaggiCountOutputTypeCountMyortiArgs
  }

  // Custom InputTypes
  /**
   * OrtaggiCountOutputType without action
   */
  export type OrtaggiCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrtaggiCountOutputType
     */
    select?: OrtaggiCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OrtaggiCountOutputType without action
   */
  export type OrtaggiCountOutputTypeCountMyortiArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MyOrtoWhereInput
  }


  /**
   * Count Type MyOrtoCountOutputType
   */

  export type MyOrtoCountOutputType = {
    pianificazioni: number
  }

  export type MyOrtoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pianificazioni?: boolean | MyOrtoCountOutputTypeCountPianificazioniArgs
  }

  // Custom InputTypes
  /**
   * MyOrtoCountOutputType without action
   */
  export type MyOrtoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MyOrtoCountOutputType
     */
    select?: MyOrtoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MyOrtoCountOutputType without action
   */
  export type MyOrtoCountOutputTypeCountPianificazioniArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PianificazioniWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    firstName: string | null
    lastName: string | null
    email: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    firstName: string | null
    lastName: string | null
    email: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    firstName: number
    lastName: number
    email: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    firstName: string
    lastName: string
    email: string
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    credentials?: boolean | User$credentialsArgs<ExtArgs>
    myorti?: boolean | User$myortiArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
  }


  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    credentials?: boolean | User$credentialsArgs<ExtArgs>
    myorti?: boolean | User$myortiArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      credentials: Prisma.$CredentialPayload<ExtArgs> | null
      myorti: Prisma.$MyOrtoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      firstName: string
      lastName: string
      email: string
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    credentials<T extends User$credentialsArgs<ExtArgs> = {}>(args?: Subset<T, User$credentialsArgs<ExtArgs>>): Prisma__CredentialClient<$Result.GetResult<Prisma.$CredentialPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    myorti<T extends User$myortiArgs<ExtArgs> = {}>(args?: Subset<T, User$myortiArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MyOrtoPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.credentials
   */
  export type User$credentialsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Credential
     */
    select?: CredentialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CredentialInclude<ExtArgs> | null
    where?: CredentialWhereInput
  }

  /**
   * User.myorti
   */
  export type User$myortiArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MyOrto
     */
    select?: MyOrtoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MyOrtoInclude<ExtArgs> | null
    where?: MyOrtoWhereInput
    orderBy?: MyOrtoOrderByWithRelationInput | MyOrtoOrderByWithRelationInput[]
    cursor?: MyOrtoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MyOrtoScalarFieldEnum | MyOrtoScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Credential
   */

  export type AggregateCredential = {
    _count: CredentialCountAggregateOutputType | null
    _avg: CredentialAvgAggregateOutputType | null
    _sum: CredentialSumAggregateOutputType | null
    _min: CredentialMinAggregateOutputType | null
    _max: CredentialMaxAggregateOutputType | null
  }

  export type CredentialAvgAggregateOutputType = {
    userId: number | null
  }

  export type CredentialSumAggregateOutputType = {
    userId: number | null
  }

  export type CredentialMinAggregateOutputType = {
    userId: number | null
    password: string | null
  }

  export type CredentialMaxAggregateOutputType = {
    userId: number | null
    password: string | null
  }

  export type CredentialCountAggregateOutputType = {
    userId: number
    password: number
    _all: number
  }


  export type CredentialAvgAggregateInputType = {
    userId?: true
  }

  export type CredentialSumAggregateInputType = {
    userId?: true
  }

  export type CredentialMinAggregateInputType = {
    userId?: true
    password?: true
  }

  export type CredentialMaxAggregateInputType = {
    userId?: true
    password?: true
  }

  export type CredentialCountAggregateInputType = {
    userId?: true
    password?: true
    _all?: true
  }

  export type CredentialAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Credential to aggregate.
     */
    where?: CredentialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Credentials to fetch.
     */
    orderBy?: CredentialOrderByWithRelationInput | CredentialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CredentialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Credentials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Credentials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Credentials
    **/
    _count?: true | CredentialCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CredentialAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CredentialSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CredentialMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CredentialMaxAggregateInputType
  }

  export type GetCredentialAggregateType<T extends CredentialAggregateArgs> = {
        [P in keyof T & keyof AggregateCredential]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCredential[P]>
      : GetScalarType<T[P], AggregateCredential[P]>
  }




  export type CredentialGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CredentialWhereInput
    orderBy?: CredentialOrderByWithAggregationInput | CredentialOrderByWithAggregationInput[]
    by: CredentialScalarFieldEnum[] | CredentialScalarFieldEnum
    having?: CredentialScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CredentialCountAggregateInputType | true
    _avg?: CredentialAvgAggregateInputType
    _sum?: CredentialSumAggregateInputType
    _min?: CredentialMinAggregateInputType
    _max?: CredentialMaxAggregateInputType
  }

  export type CredentialGroupByOutputType = {
    userId: number
    password: string
    _count: CredentialCountAggregateOutputType | null
    _avg: CredentialAvgAggregateOutputType | null
    _sum: CredentialSumAggregateOutputType | null
    _min: CredentialMinAggregateOutputType | null
    _max: CredentialMaxAggregateOutputType | null
  }

  type GetCredentialGroupByPayload<T extends CredentialGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CredentialGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CredentialGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CredentialGroupByOutputType[P]>
            : GetScalarType<T[P], CredentialGroupByOutputType[P]>
        }
      >
    >


  export type CredentialSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    password?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["credential"]>

  export type CredentialSelectScalar = {
    userId?: boolean
    password?: boolean
  }


  export type CredentialInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $CredentialPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Credential"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: number
      password: string
    }, ExtArgs["result"]["credential"]>
    composites: {}
  }


  type CredentialGetPayload<S extends boolean | null | undefined | CredentialDefaultArgs> = $Result.GetResult<Prisma.$CredentialPayload, S>

  type CredentialCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CredentialFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CredentialCountAggregateInputType | true
    }

  export interface CredentialDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Credential'], meta: { name: 'Credential' } }
    /**
     * Find zero or one Credential that matches the filter.
     * @param {CredentialFindUniqueArgs} args - Arguments to find a Credential
     * @example
     * // Get one Credential
     * const credential = await prisma.credential.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CredentialFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CredentialFindUniqueArgs<ExtArgs>>
    ): Prisma__CredentialClient<$Result.GetResult<Prisma.$CredentialPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Credential that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CredentialFindUniqueOrThrowArgs} args - Arguments to find a Credential
     * @example
     * // Get one Credential
     * const credential = await prisma.credential.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CredentialFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CredentialFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CredentialClient<$Result.GetResult<Prisma.$CredentialPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Credential that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CredentialFindFirstArgs} args - Arguments to find a Credential
     * @example
     * // Get one Credential
     * const credential = await prisma.credential.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CredentialFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CredentialFindFirstArgs<ExtArgs>>
    ): Prisma__CredentialClient<$Result.GetResult<Prisma.$CredentialPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Credential that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CredentialFindFirstOrThrowArgs} args - Arguments to find a Credential
     * @example
     * // Get one Credential
     * const credential = await prisma.credential.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CredentialFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CredentialFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CredentialClient<$Result.GetResult<Prisma.$CredentialPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Credentials that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CredentialFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Credentials
     * const credentials = await prisma.credential.findMany()
     * 
     * // Get first 10 Credentials
     * const credentials = await prisma.credential.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const credentialWithUserIdOnly = await prisma.credential.findMany({ select: { userId: true } })
     * 
    **/
    findMany<T extends CredentialFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CredentialFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CredentialPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Credential.
     * @param {CredentialCreateArgs} args - Arguments to create a Credential.
     * @example
     * // Create one Credential
     * const Credential = await prisma.credential.create({
     *   data: {
     *     // ... data to create a Credential
     *   }
     * })
     * 
    **/
    create<T extends CredentialCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CredentialCreateArgs<ExtArgs>>
    ): Prisma__CredentialClient<$Result.GetResult<Prisma.$CredentialPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Credentials.
     *     @param {CredentialCreateManyArgs} args - Arguments to create many Credentials.
     *     @example
     *     // Create many Credentials
     *     const credential = await prisma.credential.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CredentialCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CredentialCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Credential.
     * @param {CredentialDeleteArgs} args - Arguments to delete one Credential.
     * @example
     * // Delete one Credential
     * const Credential = await prisma.credential.delete({
     *   where: {
     *     // ... filter to delete one Credential
     *   }
     * })
     * 
    **/
    delete<T extends CredentialDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CredentialDeleteArgs<ExtArgs>>
    ): Prisma__CredentialClient<$Result.GetResult<Prisma.$CredentialPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Credential.
     * @param {CredentialUpdateArgs} args - Arguments to update one Credential.
     * @example
     * // Update one Credential
     * const credential = await prisma.credential.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CredentialUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CredentialUpdateArgs<ExtArgs>>
    ): Prisma__CredentialClient<$Result.GetResult<Prisma.$CredentialPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Credentials.
     * @param {CredentialDeleteManyArgs} args - Arguments to filter Credentials to delete.
     * @example
     * // Delete a few Credentials
     * const { count } = await prisma.credential.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CredentialDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CredentialDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Credentials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CredentialUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Credentials
     * const credential = await prisma.credential.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CredentialUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CredentialUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Credential.
     * @param {CredentialUpsertArgs} args - Arguments to update or create a Credential.
     * @example
     * // Update or create a Credential
     * const credential = await prisma.credential.upsert({
     *   create: {
     *     // ... data to create a Credential
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Credential we want to update
     *   }
     * })
    **/
    upsert<T extends CredentialUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CredentialUpsertArgs<ExtArgs>>
    ): Prisma__CredentialClient<$Result.GetResult<Prisma.$CredentialPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Credentials.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CredentialCountArgs} args - Arguments to filter Credentials to count.
     * @example
     * // Count the number of Credentials
     * const count = await prisma.credential.count({
     *   where: {
     *     // ... the filter for the Credentials we want to count
     *   }
     * })
    **/
    count<T extends CredentialCountArgs>(
      args?: Subset<T, CredentialCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CredentialCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Credential.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CredentialAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CredentialAggregateArgs>(args: Subset<T, CredentialAggregateArgs>): Prisma.PrismaPromise<GetCredentialAggregateType<T>>

    /**
     * Group by Credential.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CredentialGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CredentialGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CredentialGroupByArgs['orderBy'] }
        : { orderBy?: CredentialGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CredentialGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCredentialGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Credential model
   */
  readonly fields: CredentialFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Credential.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CredentialClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Credential model
   */ 
  interface CredentialFieldRefs {
    readonly userId: FieldRef<"Credential", 'Int'>
    readonly password: FieldRef<"Credential", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Credential findUnique
   */
  export type CredentialFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Credential
     */
    select?: CredentialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CredentialInclude<ExtArgs> | null
    /**
     * Filter, which Credential to fetch.
     */
    where: CredentialWhereUniqueInput
  }

  /**
   * Credential findUniqueOrThrow
   */
  export type CredentialFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Credential
     */
    select?: CredentialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CredentialInclude<ExtArgs> | null
    /**
     * Filter, which Credential to fetch.
     */
    where: CredentialWhereUniqueInput
  }

  /**
   * Credential findFirst
   */
  export type CredentialFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Credential
     */
    select?: CredentialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CredentialInclude<ExtArgs> | null
    /**
     * Filter, which Credential to fetch.
     */
    where?: CredentialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Credentials to fetch.
     */
    orderBy?: CredentialOrderByWithRelationInput | CredentialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Credentials.
     */
    cursor?: CredentialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Credentials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Credentials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Credentials.
     */
    distinct?: CredentialScalarFieldEnum | CredentialScalarFieldEnum[]
  }

  /**
   * Credential findFirstOrThrow
   */
  export type CredentialFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Credential
     */
    select?: CredentialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CredentialInclude<ExtArgs> | null
    /**
     * Filter, which Credential to fetch.
     */
    where?: CredentialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Credentials to fetch.
     */
    orderBy?: CredentialOrderByWithRelationInput | CredentialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Credentials.
     */
    cursor?: CredentialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Credentials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Credentials.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Credentials.
     */
    distinct?: CredentialScalarFieldEnum | CredentialScalarFieldEnum[]
  }

  /**
   * Credential findMany
   */
  export type CredentialFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Credential
     */
    select?: CredentialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CredentialInclude<ExtArgs> | null
    /**
     * Filter, which Credentials to fetch.
     */
    where?: CredentialWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Credentials to fetch.
     */
    orderBy?: CredentialOrderByWithRelationInput | CredentialOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Credentials.
     */
    cursor?: CredentialWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Credentials from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Credentials.
     */
    skip?: number
    distinct?: CredentialScalarFieldEnum | CredentialScalarFieldEnum[]
  }

  /**
   * Credential create
   */
  export type CredentialCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Credential
     */
    select?: CredentialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CredentialInclude<ExtArgs> | null
    /**
     * The data needed to create a Credential.
     */
    data: XOR<CredentialCreateInput, CredentialUncheckedCreateInput>
  }

  /**
   * Credential createMany
   */
  export type CredentialCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Credentials.
     */
    data: CredentialCreateManyInput | CredentialCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Credential update
   */
  export type CredentialUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Credential
     */
    select?: CredentialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CredentialInclude<ExtArgs> | null
    /**
     * The data needed to update a Credential.
     */
    data: XOR<CredentialUpdateInput, CredentialUncheckedUpdateInput>
    /**
     * Choose, which Credential to update.
     */
    where: CredentialWhereUniqueInput
  }

  /**
   * Credential updateMany
   */
  export type CredentialUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Credentials.
     */
    data: XOR<CredentialUpdateManyMutationInput, CredentialUncheckedUpdateManyInput>
    /**
     * Filter which Credentials to update
     */
    where?: CredentialWhereInput
  }

  /**
   * Credential upsert
   */
  export type CredentialUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Credential
     */
    select?: CredentialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CredentialInclude<ExtArgs> | null
    /**
     * The filter to search for the Credential to update in case it exists.
     */
    where: CredentialWhereUniqueInput
    /**
     * In case the Credential found by the `where` argument doesn't exist, create a new Credential with this data.
     */
    create: XOR<CredentialCreateInput, CredentialUncheckedCreateInput>
    /**
     * In case the Credential was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CredentialUpdateInput, CredentialUncheckedUpdateInput>
  }

  /**
   * Credential delete
   */
  export type CredentialDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Credential
     */
    select?: CredentialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CredentialInclude<ExtArgs> | null
    /**
     * Filter which Credential to delete.
     */
    where: CredentialWhereUniqueInput
  }

  /**
   * Credential deleteMany
   */
  export type CredentialDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Credentials to delete
     */
    where?: CredentialWhereInput
  }

  /**
   * Credential without action
   */
  export type CredentialDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Credential
     */
    select?: CredentialSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CredentialInclude<ExtArgs> | null
  }


  /**
   * Model Ortaggi
   */

  export type AggregateOrtaggi = {
    _count: OrtaggiCountAggregateOutputType | null
    _avg: OrtaggiAvgAggregateOutputType | null
    _sum: OrtaggiSumAggregateOutputType | null
    _min: OrtaggiMinAggregateOutputType | null
    _max: OrtaggiMaxAggregateOutputType | null
  }

  export type OrtaggiAvgAggregateOutputType = {
    tempiMaturazione: number | null
    frequenzaInnaffiatura: number | null
  }

  export type OrtaggiSumAggregateOutputType = {
    tempiMaturazione: number | null
    frequenzaInnaffiatura: number | null
  }

  export type OrtaggiMinAggregateOutputType = {
    nome: string | null
    periodoColtivazione: string | null
    esposizione: string | null
    tempiMaturazione: number | null
    tipoTerreno: string | null
    distanzaPiantagione: string | null
    profonditaSemina: string | null
    temperaturaMin: string | null
    temperaturaMax: string | null
    frequenzaInnaffiatura: number | null
    note: string | null
  }

  export type OrtaggiMaxAggregateOutputType = {
    nome: string | null
    periodoColtivazione: string | null
    esposizione: string | null
    tempiMaturazione: number | null
    tipoTerreno: string | null
    distanzaPiantagione: string | null
    profonditaSemina: string | null
    temperaturaMin: string | null
    temperaturaMax: string | null
    frequenzaInnaffiatura: number | null
    note: string | null
  }

  export type OrtaggiCountAggregateOutputType = {
    nome: number
    periodoColtivazione: number
    esposizione: number
    tempiMaturazione: number
    tipoTerreno: number
    distanzaPiantagione: number
    profonditaSemina: number
    temperaturaMin: number
    temperaturaMax: number
    frequenzaInnaffiatura: number
    note: number
    _all: number
  }


  export type OrtaggiAvgAggregateInputType = {
    tempiMaturazione?: true
    frequenzaInnaffiatura?: true
  }

  export type OrtaggiSumAggregateInputType = {
    tempiMaturazione?: true
    frequenzaInnaffiatura?: true
  }

  export type OrtaggiMinAggregateInputType = {
    nome?: true
    periodoColtivazione?: true
    esposizione?: true
    tempiMaturazione?: true
    tipoTerreno?: true
    distanzaPiantagione?: true
    profonditaSemina?: true
    temperaturaMin?: true
    temperaturaMax?: true
    frequenzaInnaffiatura?: true
    note?: true
  }

  export type OrtaggiMaxAggregateInputType = {
    nome?: true
    periodoColtivazione?: true
    esposizione?: true
    tempiMaturazione?: true
    tipoTerreno?: true
    distanzaPiantagione?: true
    profonditaSemina?: true
    temperaturaMin?: true
    temperaturaMax?: true
    frequenzaInnaffiatura?: true
    note?: true
  }

  export type OrtaggiCountAggregateInputType = {
    nome?: true
    periodoColtivazione?: true
    esposizione?: true
    tempiMaturazione?: true
    tipoTerreno?: true
    distanzaPiantagione?: true
    profonditaSemina?: true
    temperaturaMin?: true
    temperaturaMax?: true
    frequenzaInnaffiatura?: true
    note?: true
    _all?: true
  }

  export type OrtaggiAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ortaggi to aggregate.
     */
    where?: OrtaggiWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ortaggis to fetch.
     */
    orderBy?: OrtaggiOrderByWithRelationInput | OrtaggiOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrtaggiWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ortaggis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ortaggis.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Ortaggis
    **/
    _count?: true | OrtaggiCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrtaggiAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrtaggiSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrtaggiMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrtaggiMaxAggregateInputType
  }

  export type GetOrtaggiAggregateType<T extends OrtaggiAggregateArgs> = {
        [P in keyof T & keyof AggregateOrtaggi]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrtaggi[P]>
      : GetScalarType<T[P], AggregateOrtaggi[P]>
  }




  export type OrtaggiGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrtaggiWhereInput
    orderBy?: OrtaggiOrderByWithAggregationInput | OrtaggiOrderByWithAggregationInput[]
    by: OrtaggiScalarFieldEnum[] | OrtaggiScalarFieldEnum
    having?: OrtaggiScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrtaggiCountAggregateInputType | true
    _avg?: OrtaggiAvgAggregateInputType
    _sum?: OrtaggiSumAggregateInputType
    _min?: OrtaggiMinAggregateInputType
    _max?: OrtaggiMaxAggregateInputType
  }

  export type OrtaggiGroupByOutputType = {
    nome: string
    periodoColtivazione: string
    esposizione: string
    tempiMaturazione: number
    tipoTerreno: string
    distanzaPiantagione: string
    profonditaSemina: string
    temperaturaMin: string
    temperaturaMax: string
    frequenzaInnaffiatura: number
    note: string
    _count: OrtaggiCountAggregateOutputType | null
    _avg: OrtaggiAvgAggregateOutputType | null
    _sum: OrtaggiSumAggregateOutputType | null
    _min: OrtaggiMinAggregateOutputType | null
    _max: OrtaggiMaxAggregateOutputType | null
  }

  type GetOrtaggiGroupByPayload<T extends OrtaggiGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrtaggiGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrtaggiGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrtaggiGroupByOutputType[P]>
            : GetScalarType<T[P], OrtaggiGroupByOutputType[P]>
        }
      >
    >


  export type OrtaggiSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    nome?: boolean
    periodoColtivazione?: boolean
    esposizione?: boolean
    tempiMaturazione?: boolean
    tipoTerreno?: boolean
    distanzaPiantagione?: boolean
    profonditaSemina?: boolean
    temperaturaMin?: boolean
    temperaturaMax?: boolean
    frequenzaInnaffiatura?: boolean
    note?: boolean
    myorti?: boolean | Ortaggi$myortiArgs<ExtArgs>
    _count?: boolean | OrtaggiCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ortaggi"]>

  export type OrtaggiSelectScalar = {
    nome?: boolean
    periodoColtivazione?: boolean
    esposizione?: boolean
    tempiMaturazione?: boolean
    tipoTerreno?: boolean
    distanzaPiantagione?: boolean
    profonditaSemina?: boolean
    temperaturaMin?: boolean
    temperaturaMax?: boolean
    frequenzaInnaffiatura?: boolean
    note?: boolean
  }


  export type OrtaggiInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    myorti?: boolean | Ortaggi$myortiArgs<ExtArgs>
    _count?: boolean | OrtaggiCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $OrtaggiPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Ortaggi"
    objects: {
      myorti: Prisma.$MyOrtoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      nome: string
      periodoColtivazione: string
      esposizione: string
      tempiMaturazione: number
      tipoTerreno: string
      distanzaPiantagione: string
      profonditaSemina: string
      temperaturaMin: string
      temperaturaMax: string
      frequenzaInnaffiatura: number
      note: string
    }, ExtArgs["result"]["ortaggi"]>
    composites: {}
  }


  type OrtaggiGetPayload<S extends boolean | null | undefined | OrtaggiDefaultArgs> = $Result.GetResult<Prisma.$OrtaggiPayload, S>

  type OrtaggiCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<OrtaggiFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: OrtaggiCountAggregateInputType | true
    }

  export interface OrtaggiDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Ortaggi'], meta: { name: 'Ortaggi' } }
    /**
     * Find zero or one Ortaggi that matches the filter.
     * @param {OrtaggiFindUniqueArgs} args - Arguments to find a Ortaggi
     * @example
     * // Get one Ortaggi
     * const ortaggi = await prisma.ortaggi.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends OrtaggiFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, OrtaggiFindUniqueArgs<ExtArgs>>
    ): Prisma__OrtaggiClient<$Result.GetResult<Prisma.$OrtaggiPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Ortaggi that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {OrtaggiFindUniqueOrThrowArgs} args - Arguments to find a Ortaggi
     * @example
     * // Get one Ortaggi
     * const ortaggi = await prisma.ortaggi.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends OrtaggiFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, OrtaggiFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__OrtaggiClient<$Result.GetResult<Prisma.$OrtaggiPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Ortaggi that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrtaggiFindFirstArgs} args - Arguments to find a Ortaggi
     * @example
     * // Get one Ortaggi
     * const ortaggi = await prisma.ortaggi.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends OrtaggiFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, OrtaggiFindFirstArgs<ExtArgs>>
    ): Prisma__OrtaggiClient<$Result.GetResult<Prisma.$OrtaggiPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Ortaggi that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrtaggiFindFirstOrThrowArgs} args - Arguments to find a Ortaggi
     * @example
     * // Get one Ortaggi
     * const ortaggi = await prisma.ortaggi.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends OrtaggiFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, OrtaggiFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__OrtaggiClient<$Result.GetResult<Prisma.$OrtaggiPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Ortaggis that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrtaggiFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ortaggis
     * const ortaggis = await prisma.ortaggi.findMany()
     * 
     * // Get first 10 Ortaggis
     * const ortaggis = await prisma.ortaggi.findMany({ take: 10 })
     * 
     * // Only select the `nome`
     * const ortaggiWithNomeOnly = await prisma.ortaggi.findMany({ select: { nome: true } })
     * 
    **/
    findMany<T extends OrtaggiFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, OrtaggiFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrtaggiPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Ortaggi.
     * @param {OrtaggiCreateArgs} args - Arguments to create a Ortaggi.
     * @example
     * // Create one Ortaggi
     * const Ortaggi = await prisma.ortaggi.create({
     *   data: {
     *     // ... data to create a Ortaggi
     *   }
     * })
     * 
    **/
    create<T extends OrtaggiCreateArgs<ExtArgs>>(
      args: SelectSubset<T, OrtaggiCreateArgs<ExtArgs>>
    ): Prisma__OrtaggiClient<$Result.GetResult<Prisma.$OrtaggiPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Ortaggis.
     *     @param {OrtaggiCreateManyArgs} args - Arguments to create many Ortaggis.
     *     @example
     *     // Create many Ortaggis
     *     const ortaggi = await prisma.ortaggi.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends OrtaggiCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, OrtaggiCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Ortaggi.
     * @param {OrtaggiDeleteArgs} args - Arguments to delete one Ortaggi.
     * @example
     * // Delete one Ortaggi
     * const Ortaggi = await prisma.ortaggi.delete({
     *   where: {
     *     // ... filter to delete one Ortaggi
     *   }
     * })
     * 
    **/
    delete<T extends OrtaggiDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, OrtaggiDeleteArgs<ExtArgs>>
    ): Prisma__OrtaggiClient<$Result.GetResult<Prisma.$OrtaggiPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Ortaggi.
     * @param {OrtaggiUpdateArgs} args - Arguments to update one Ortaggi.
     * @example
     * // Update one Ortaggi
     * const ortaggi = await prisma.ortaggi.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends OrtaggiUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, OrtaggiUpdateArgs<ExtArgs>>
    ): Prisma__OrtaggiClient<$Result.GetResult<Prisma.$OrtaggiPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Ortaggis.
     * @param {OrtaggiDeleteManyArgs} args - Arguments to filter Ortaggis to delete.
     * @example
     * // Delete a few Ortaggis
     * const { count } = await prisma.ortaggi.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends OrtaggiDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, OrtaggiDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ortaggis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrtaggiUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ortaggis
     * const ortaggi = await prisma.ortaggi.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends OrtaggiUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, OrtaggiUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Ortaggi.
     * @param {OrtaggiUpsertArgs} args - Arguments to update or create a Ortaggi.
     * @example
     * // Update or create a Ortaggi
     * const ortaggi = await prisma.ortaggi.upsert({
     *   create: {
     *     // ... data to create a Ortaggi
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Ortaggi we want to update
     *   }
     * })
    **/
    upsert<T extends OrtaggiUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, OrtaggiUpsertArgs<ExtArgs>>
    ): Prisma__OrtaggiClient<$Result.GetResult<Prisma.$OrtaggiPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Ortaggis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrtaggiCountArgs} args - Arguments to filter Ortaggis to count.
     * @example
     * // Count the number of Ortaggis
     * const count = await prisma.ortaggi.count({
     *   where: {
     *     // ... the filter for the Ortaggis we want to count
     *   }
     * })
    **/
    count<T extends OrtaggiCountArgs>(
      args?: Subset<T, OrtaggiCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrtaggiCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Ortaggi.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrtaggiAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrtaggiAggregateArgs>(args: Subset<T, OrtaggiAggregateArgs>): Prisma.PrismaPromise<GetOrtaggiAggregateType<T>>

    /**
     * Group by Ortaggi.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrtaggiGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrtaggiGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrtaggiGroupByArgs['orderBy'] }
        : { orderBy?: OrtaggiGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrtaggiGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrtaggiGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Ortaggi model
   */
  readonly fields: OrtaggiFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Ortaggi.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrtaggiClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    myorti<T extends Ortaggi$myortiArgs<ExtArgs> = {}>(args?: Subset<T, Ortaggi$myortiArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MyOrtoPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Ortaggi model
   */ 
  interface OrtaggiFieldRefs {
    readonly nome: FieldRef<"Ortaggi", 'String'>
    readonly periodoColtivazione: FieldRef<"Ortaggi", 'String'>
    readonly esposizione: FieldRef<"Ortaggi", 'String'>
    readonly tempiMaturazione: FieldRef<"Ortaggi", 'Int'>
    readonly tipoTerreno: FieldRef<"Ortaggi", 'String'>
    readonly distanzaPiantagione: FieldRef<"Ortaggi", 'String'>
    readonly profonditaSemina: FieldRef<"Ortaggi", 'String'>
    readonly temperaturaMin: FieldRef<"Ortaggi", 'String'>
    readonly temperaturaMax: FieldRef<"Ortaggi", 'String'>
    readonly frequenzaInnaffiatura: FieldRef<"Ortaggi", 'Int'>
    readonly note: FieldRef<"Ortaggi", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Ortaggi findUnique
   */
  export type OrtaggiFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ortaggi
     */
    select?: OrtaggiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrtaggiInclude<ExtArgs> | null
    /**
     * Filter, which Ortaggi to fetch.
     */
    where: OrtaggiWhereUniqueInput
  }

  /**
   * Ortaggi findUniqueOrThrow
   */
  export type OrtaggiFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ortaggi
     */
    select?: OrtaggiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrtaggiInclude<ExtArgs> | null
    /**
     * Filter, which Ortaggi to fetch.
     */
    where: OrtaggiWhereUniqueInput
  }

  /**
   * Ortaggi findFirst
   */
  export type OrtaggiFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ortaggi
     */
    select?: OrtaggiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrtaggiInclude<ExtArgs> | null
    /**
     * Filter, which Ortaggi to fetch.
     */
    where?: OrtaggiWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ortaggis to fetch.
     */
    orderBy?: OrtaggiOrderByWithRelationInput | OrtaggiOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ortaggis.
     */
    cursor?: OrtaggiWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ortaggis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ortaggis.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ortaggis.
     */
    distinct?: OrtaggiScalarFieldEnum | OrtaggiScalarFieldEnum[]
  }

  /**
   * Ortaggi findFirstOrThrow
   */
  export type OrtaggiFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ortaggi
     */
    select?: OrtaggiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrtaggiInclude<ExtArgs> | null
    /**
     * Filter, which Ortaggi to fetch.
     */
    where?: OrtaggiWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ortaggis to fetch.
     */
    orderBy?: OrtaggiOrderByWithRelationInput | OrtaggiOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ortaggis.
     */
    cursor?: OrtaggiWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ortaggis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ortaggis.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ortaggis.
     */
    distinct?: OrtaggiScalarFieldEnum | OrtaggiScalarFieldEnum[]
  }

  /**
   * Ortaggi findMany
   */
  export type OrtaggiFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ortaggi
     */
    select?: OrtaggiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrtaggiInclude<ExtArgs> | null
    /**
     * Filter, which Ortaggis to fetch.
     */
    where?: OrtaggiWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ortaggis to fetch.
     */
    orderBy?: OrtaggiOrderByWithRelationInput | OrtaggiOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Ortaggis.
     */
    cursor?: OrtaggiWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ortaggis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ortaggis.
     */
    skip?: number
    distinct?: OrtaggiScalarFieldEnum | OrtaggiScalarFieldEnum[]
  }

  /**
   * Ortaggi create
   */
  export type OrtaggiCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ortaggi
     */
    select?: OrtaggiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrtaggiInclude<ExtArgs> | null
    /**
     * The data needed to create a Ortaggi.
     */
    data: XOR<OrtaggiCreateInput, OrtaggiUncheckedCreateInput>
  }

  /**
   * Ortaggi createMany
   */
  export type OrtaggiCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Ortaggis.
     */
    data: OrtaggiCreateManyInput | OrtaggiCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Ortaggi update
   */
  export type OrtaggiUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ortaggi
     */
    select?: OrtaggiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrtaggiInclude<ExtArgs> | null
    /**
     * The data needed to update a Ortaggi.
     */
    data: XOR<OrtaggiUpdateInput, OrtaggiUncheckedUpdateInput>
    /**
     * Choose, which Ortaggi to update.
     */
    where: OrtaggiWhereUniqueInput
  }

  /**
   * Ortaggi updateMany
   */
  export type OrtaggiUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Ortaggis.
     */
    data: XOR<OrtaggiUpdateManyMutationInput, OrtaggiUncheckedUpdateManyInput>
    /**
     * Filter which Ortaggis to update
     */
    where?: OrtaggiWhereInput
  }

  /**
   * Ortaggi upsert
   */
  export type OrtaggiUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ortaggi
     */
    select?: OrtaggiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrtaggiInclude<ExtArgs> | null
    /**
     * The filter to search for the Ortaggi to update in case it exists.
     */
    where: OrtaggiWhereUniqueInput
    /**
     * In case the Ortaggi found by the `where` argument doesn't exist, create a new Ortaggi with this data.
     */
    create: XOR<OrtaggiCreateInput, OrtaggiUncheckedCreateInput>
    /**
     * In case the Ortaggi was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrtaggiUpdateInput, OrtaggiUncheckedUpdateInput>
  }

  /**
   * Ortaggi delete
   */
  export type OrtaggiDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ortaggi
     */
    select?: OrtaggiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrtaggiInclude<ExtArgs> | null
    /**
     * Filter which Ortaggi to delete.
     */
    where: OrtaggiWhereUniqueInput
  }

  /**
   * Ortaggi deleteMany
   */
  export type OrtaggiDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ortaggis to delete
     */
    where?: OrtaggiWhereInput
  }

  /**
   * Ortaggi.myorti
   */
  export type Ortaggi$myortiArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MyOrto
     */
    select?: MyOrtoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MyOrtoInclude<ExtArgs> | null
    where?: MyOrtoWhereInput
    orderBy?: MyOrtoOrderByWithRelationInput | MyOrtoOrderByWithRelationInput[]
    cursor?: MyOrtoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MyOrtoScalarFieldEnum | MyOrtoScalarFieldEnum[]
  }

  /**
   * Ortaggi without action
   */
  export type OrtaggiDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ortaggi
     */
    select?: OrtaggiSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrtaggiInclude<ExtArgs> | null
  }


  /**
   * Model Glossario
   */

  export type AggregateGlossario = {
    _count: GlossarioCountAggregateOutputType | null
    _min: GlossarioMinAggregateOutputType | null
    _max: GlossarioMaxAggregateOutputType | null
  }

  export type GlossarioMinAggregateOutputType = {
    parola: string | null
    definizione: string | null
  }

  export type GlossarioMaxAggregateOutputType = {
    parola: string | null
    definizione: string | null
  }

  export type GlossarioCountAggregateOutputType = {
    parola: number
    definizione: number
    _all: number
  }


  export type GlossarioMinAggregateInputType = {
    parola?: true
    definizione?: true
  }

  export type GlossarioMaxAggregateInputType = {
    parola?: true
    definizione?: true
  }

  export type GlossarioCountAggregateInputType = {
    parola?: true
    definizione?: true
    _all?: true
  }

  export type GlossarioAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Glossario to aggregate.
     */
    where?: GlossarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Glossarios to fetch.
     */
    orderBy?: GlossarioOrderByWithRelationInput | GlossarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GlossarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Glossarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Glossarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Glossarios
    **/
    _count?: true | GlossarioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GlossarioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GlossarioMaxAggregateInputType
  }

  export type GetGlossarioAggregateType<T extends GlossarioAggregateArgs> = {
        [P in keyof T & keyof AggregateGlossario]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGlossario[P]>
      : GetScalarType<T[P], AggregateGlossario[P]>
  }




  export type GlossarioGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GlossarioWhereInput
    orderBy?: GlossarioOrderByWithAggregationInput | GlossarioOrderByWithAggregationInput[]
    by: GlossarioScalarFieldEnum[] | GlossarioScalarFieldEnum
    having?: GlossarioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GlossarioCountAggregateInputType | true
    _min?: GlossarioMinAggregateInputType
    _max?: GlossarioMaxAggregateInputType
  }

  export type GlossarioGroupByOutputType = {
    parola: string
    definizione: string
    _count: GlossarioCountAggregateOutputType | null
    _min: GlossarioMinAggregateOutputType | null
    _max: GlossarioMaxAggregateOutputType | null
  }

  type GetGlossarioGroupByPayload<T extends GlossarioGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GlossarioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GlossarioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GlossarioGroupByOutputType[P]>
            : GetScalarType<T[P], GlossarioGroupByOutputType[P]>
        }
      >
    >


  export type GlossarioSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    parola?: boolean
    definizione?: boolean
  }, ExtArgs["result"]["glossario"]>

  export type GlossarioSelectScalar = {
    parola?: boolean
    definizione?: boolean
  }



  export type $GlossarioPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Glossario"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      parola: string
      definizione: string
    }, ExtArgs["result"]["glossario"]>
    composites: {}
  }


  type GlossarioGetPayload<S extends boolean | null | undefined | GlossarioDefaultArgs> = $Result.GetResult<Prisma.$GlossarioPayload, S>

  type GlossarioCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GlossarioFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GlossarioCountAggregateInputType | true
    }

  export interface GlossarioDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Glossario'], meta: { name: 'Glossario' } }
    /**
     * Find zero or one Glossario that matches the filter.
     * @param {GlossarioFindUniqueArgs} args - Arguments to find a Glossario
     * @example
     * // Get one Glossario
     * const glossario = await prisma.glossario.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GlossarioFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, GlossarioFindUniqueArgs<ExtArgs>>
    ): Prisma__GlossarioClient<$Result.GetResult<Prisma.$GlossarioPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Glossario that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {GlossarioFindUniqueOrThrowArgs} args - Arguments to find a Glossario
     * @example
     * // Get one Glossario
     * const glossario = await prisma.glossario.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends GlossarioFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GlossarioFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__GlossarioClient<$Result.GetResult<Prisma.$GlossarioPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Glossario that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GlossarioFindFirstArgs} args - Arguments to find a Glossario
     * @example
     * // Get one Glossario
     * const glossario = await prisma.glossario.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GlossarioFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, GlossarioFindFirstArgs<ExtArgs>>
    ): Prisma__GlossarioClient<$Result.GetResult<Prisma.$GlossarioPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Glossario that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GlossarioFindFirstOrThrowArgs} args - Arguments to find a Glossario
     * @example
     * // Get one Glossario
     * const glossario = await prisma.glossario.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends GlossarioFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GlossarioFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__GlossarioClient<$Result.GetResult<Prisma.$GlossarioPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Glossarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GlossarioFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Glossarios
     * const glossarios = await prisma.glossario.findMany()
     * 
     * // Get first 10 Glossarios
     * const glossarios = await prisma.glossario.findMany({ take: 10 })
     * 
     * // Only select the `parola`
     * const glossarioWithParolaOnly = await prisma.glossario.findMany({ select: { parola: true } })
     * 
    **/
    findMany<T extends GlossarioFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GlossarioFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GlossarioPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Glossario.
     * @param {GlossarioCreateArgs} args - Arguments to create a Glossario.
     * @example
     * // Create one Glossario
     * const Glossario = await prisma.glossario.create({
     *   data: {
     *     // ... data to create a Glossario
     *   }
     * })
     * 
    **/
    create<T extends GlossarioCreateArgs<ExtArgs>>(
      args: SelectSubset<T, GlossarioCreateArgs<ExtArgs>>
    ): Prisma__GlossarioClient<$Result.GetResult<Prisma.$GlossarioPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Glossarios.
     *     @param {GlossarioCreateManyArgs} args - Arguments to create many Glossarios.
     *     @example
     *     // Create many Glossarios
     *     const glossario = await prisma.glossario.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GlossarioCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GlossarioCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Glossario.
     * @param {GlossarioDeleteArgs} args - Arguments to delete one Glossario.
     * @example
     * // Delete one Glossario
     * const Glossario = await prisma.glossario.delete({
     *   where: {
     *     // ... filter to delete one Glossario
     *   }
     * })
     * 
    **/
    delete<T extends GlossarioDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, GlossarioDeleteArgs<ExtArgs>>
    ): Prisma__GlossarioClient<$Result.GetResult<Prisma.$GlossarioPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Glossario.
     * @param {GlossarioUpdateArgs} args - Arguments to update one Glossario.
     * @example
     * // Update one Glossario
     * const glossario = await prisma.glossario.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GlossarioUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, GlossarioUpdateArgs<ExtArgs>>
    ): Prisma__GlossarioClient<$Result.GetResult<Prisma.$GlossarioPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Glossarios.
     * @param {GlossarioDeleteManyArgs} args - Arguments to filter Glossarios to delete.
     * @example
     * // Delete a few Glossarios
     * const { count } = await prisma.glossario.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GlossarioDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GlossarioDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Glossarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GlossarioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Glossarios
     * const glossario = await prisma.glossario.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GlossarioUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, GlossarioUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Glossario.
     * @param {GlossarioUpsertArgs} args - Arguments to update or create a Glossario.
     * @example
     * // Update or create a Glossario
     * const glossario = await prisma.glossario.upsert({
     *   create: {
     *     // ... data to create a Glossario
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Glossario we want to update
     *   }
     * })
    **/
    upsert<T extends GlossarioUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, GlossarioUpsertArgs<ExtArgs>>
    ): Prisma__GlossarioClient<$Result.GetResult<Prisma.$GlossarioPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Glossarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GlossarioCountArgs} args - Arguments to filter Glossarios to count.
     * @example
     * // Count the number of Glossarios
     * const count = await prisma.glossario.count({
     *   where: {
     *     // ... the filter for the Glossarios we want to count
     *   }
     * })
    **/
    count<T extends GlossarioCountArgs>(
      args?: Subset<T, GlossarioCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GlossarioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Glossario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GlossarioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GlossarioAggregateArgs>(args: Subset<T, GlossarioAggregateArgs>): Prisma.PrismaPromise<GetGlossarioAggregateType<T>>

    /**
     * Group by Glossario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GlossarioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GlossarioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GlossarioGroupByArgs['orderBy'] }
        : { orderBy?: GlossarioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GlossarioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGlossarioGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Glossario model
   */
  readonly fields: GlossarioFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Glossario.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GlossarioClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Glossario model
   */ 
  interface GlossarioFieldRefs {
    readonly parola: FieldRef<"Glossario", 'String'>
    readonly definizione: FieldRef<"Glossario", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Glossario findUnique
   */
  export type GlossarioFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Glossario
     */
    select?: GlossarioSelect<ExtArgs> | null
    /**
     * Filter, which Glossario to fetch.
     */
    where: GlossarioWhereUniqueInput
  }

  /**
   * Glossario findUniqueOrThrow
   */
  export type GlossarioFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Glossario
     */
    select?: GlossarioSelect<ExtArgs> | null
    /**
     * Filter, which Glossario to fetch.
     */
    where: GlossarioWhereUniqueInput
  }

  /**
   * Glossario findFirst
   */
  export type GlossarioFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Glossario
     */
    select?: GlossarioSelect<ExtArgs> | null
    /**
     * Filter, which Glossario to fetch.
     */
    where?: GlossarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Glossarios to fetch.
     */
    orderBy?: GlossarioOrderByWithRelationInput | GlossarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Glossarios.
     */
    cursor?: GlossarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Glossarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Glossarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Glossarios.
     */
    distinct?: GlossarioScalarFieldEnum | GlossarioScalarFieldEnum[]
  }

  /**
   * Glossario findFirstOrThrow
   */
  export type GlossarioFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Glossario
     */
    select?: GlossarioSelect<ExtArgs> | null
    /**
     * Filter, which Glossario to fetch.
     */
    where?: GlossarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Glossarios to fetch.
     */
    orderBy?: GlossarioOrderByWithRelationInput | GlossarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Glossarios.
     */
    cursor?: GlossarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Glossarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Glossarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Glossarios.
     */
    distinct?: GlossarioScalarFieldEnum | GlossarioScalarFieldEnum[]
  }

  /**
   * Glossario findMany
   */
  export type GlossarioFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Glossario
     */
    select?: GlossarioSelect<ExtArgs> | null
    /**
     * Filter, which Glossarios to fetch.
     */
    where?: GlossarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Glossarios to fetch.
     */
    orderBy?: GlossarioOrderByWithRelationInput | GlossarioOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Glossarios.
     */
    cursor?: GlossarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Glossarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Glossarios.
     */
    skip?: number
    distinct?: GlossarioScalarFieldEnum | GlossarioScalarFieldEnum[]
  }

  /**
   * Glossario create
   */
  export type GlossarioCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Glossario
     */
    select?: GlossarioSelect<ExtArgs> | null
    /**
     * The data needed to create a Glossario.
     */
    data: XOR<GlossarioCreateInput, GlossarioUncheckedCreateInput>
  }

  /**
   * Glossario createMany
   */
  export type GlossarioCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Glossarios.
     */
    data: GlossarioCreateManyInput | GlossarioCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Glossario update
   */
  export type GlossarioUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Glossario
     */
    select?: GlossarioSelect<ExtArgs> | null
    /**
     * The data needed to update a Glossario.
     */
    data: XOR<GlossarioUpdateInput, GlossarioUncheckedUpdateInput>
    /**
     * Choose, which Glossario to update.
     */
    where: GlossarioWhereUniqueInput
  }

  /**
   * Glossario updateMany
   */
  export type GlossarioUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Glossarios.
     */
    data: XOR<GlossarioUpdateManyMutationInput, GlossarioUncheckedUpdateManyInput>
    /**
     * Filter which Glossarios to update
     */
    where?: GlossarioWhereInput
  }

  /**
   * Glossario upsert
   */
  export type GlossarioUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Glossario
     */
    select?: GlossarioSelect<ExtArgs> | null
    /**
     * The filter to search for the Glossario to update in case it exists.
     */
    where: GlossarioWhereUniqueInput
    /**
     * In case the Glossario found by the `where` argument doesn't exist, create a new Glossario with this data.
     */
    create: XOR<GlossarioCreateInput, GlossarioUncheckedCreateInput>
    /**
     * In case the Glossario was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GlossarioUpdateInput, GlossarioUncheckedUpdateInput>
  }

  /**
   * Glossario delete
   */
  export type GlossarioDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Glossario
     */
    select?: GlossarioSelect<ExtArgs> | null
    /**
     * Filter which Glossario to delete.
     */
    where: GlossarioWhereUniqueInput
  }

  /**
   * Glossario deleteMany
   */
  export type GlossarioDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Glossarios to delete
     */
    where?: GlossarioWhereInput
  }

  /**
   * Glossario without action
   */
  export type GlossarioDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Glossario
     */
    select?: GlossarioSelect<ExtArgs> | null
  }


  /**
   * Model MyOrto
   */

  export type AggregateMyOrto = {
    _count: MyOrtoCountAggregateOutputType | null
    _avg: MyOrtoAvgAggregateOutputType | null
    _sum: MyOrtoSumAggregateOutputType | null
    _min: MyOrtoMinAggregateOutputType | null
    _max: MyOrtoMaxAggregateOutputType | null
  }

  export type MyOrtoAvgAggregateOutputType = {
    id: number | null
    numeroPiante: number | null
    userId: number | null
  }

  export type MyOrtoSumAggregateOutputType = {
    id: number | null
    numeroPiante: number | null
    userId: number | null
  }

  export type MyOrtoMinAggregateOutputType = {
    id: number | null
    nome: string | null
    citta: string | null
    tipoPiantagione: string | null
    numeroPiante: number | null
    dataSemina: string | null
    sistemazione: string | null
    userId: number | null
  }

  export type MyOrtoMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    citta: string | null
    tipoPiantagione: string | null
    numeroPiante: number | null
    dataSemina: string | null
    sistemazione: string | null
    userId: number | null
  }

  export type MyOrtoCountAggregateOutputType = {
    id: number
    nome: number
    citta: number
    tipoPiantagione: number
    numeroPiante: number
    dataSemina: number
    sistemazione: number
    userId: number
    _all: number
  }


  export type MyOrtoAvgAggregateInputType = {
    id?: true
    numeroPiante?: true
    userId?: true
  }

  export type MyOrtoSumAggregateInputType = {
    id?: true
    numeroPiante?: true
    userId?: true
  }

  export type MyOrtoMinAggregateInputType = {
    id?: true
    nome?: true
    citta?: true
    tipoPiantagione?: true
    numeroPiante?: true
    dataSemina?: true
    sistemazione?: true
    userId?: true
  }

  export type MyOrtoMaxAggregateInputType = {
    id?: true
    nome?: true
    citta?: true
    tipoPiantagione?: true
    numeroPiante?: true
    dataSemina?: true
    sistemazione?: true
    userId?: true
  }

  export type MyOrtoCountAggregateInputType = {
    id?: true
    nome?: true
    citta?: true
    tipoPiantagione?: true
    numeroPiante?: true
    dataSemina?: true
    sistemazione?: true
    userId?: true
    _all?: true
  }

  export type MyOrtoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MyOrto to aggregate.
     */
    where?: MyOrtoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MyOrtos to fetch.
     */
    orderBy?: MyOrtoOrderByWithRelationInput | MyOrtoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MyOrtoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MyOrtos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MyOrtos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MyOrtos
    **/
    _count?: true | MyOrtoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MyOrtoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MyOrtoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MyOrtoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MyOrtoMaxAggregateInputType
  }

  export type GetMyOrtoAggregateType<T extends MyOrtoAggregateArgs> = {
        [P in keyof T & keyof AggregateMyOrto]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMyOrto[P]>
      : GetScalarType<T[P], AggregateMyOrto[P]>
  }




  export type MyOrtoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MyOrtoWhereInput
    orderBy?: MyOrtoOrderByWithAggregationInput | MyOrtoOrderByWithAggregationInput[]
    by: MyOrtoScalarFieldEnum[] | MyOrtoScalarFieldEnum
    having?: MyOrtoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MyOrtoCountAggregateInputType | true
    _avg?: MyOrtoAvgAggregateInputType
    _sum?: MyOrtoSumAggregateInputType
    _min?: MyOrtoMinAggregateInputType
    _max?: MyOrtoMaxAggregateInputType
  }

  export type MyOrtoGroupByOutputType = {
    id: number
    nome: string
    citta: string
    tipoPiantagione: string
    numeroPiante: number
    dataSemina: string
    sistemazione: string
    userId: number
    _count: MyOrtoCountAggregateOutputType | null
    _avg: MyOrtoAvgAggregateOutputType | null
    _sum: MyOrtoSumAggregateOutputType | null
    _min: MyOrtoMinAggregateOutputType | null
    _max: MyOrtoMaxAggregateOutputType | null
  }

  type GetMyOrtoGroupByPayload<T extends MyOrtoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MyOrtoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MyOrtoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MyOrtoGroupByOutputType[P]>
            : GetScalarType<T[P], MyOrtoGroupByOutputType[P]>
        }
      >
    >


  export type MyOrtoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    citta?: boolean
    tipoPiantagione?: boolean
    numeroPiante?: boolean
    dataSemina?: boolean
    sistemazione?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    ortaggio?: boolean | OrtaggiDefaultArgs<ExtArgs>
    pianificazioni?: boolean | MyOrto$pianificazioniArgs<ExtArgs>
    _count?: boolean | MyOrtoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["myOrto"]>

  export type MyOrtoSelectScalar = {
    id?: boolean
    nome?: boolean
    citta?: boolean
    tipoPiantagione?: boolean
    numeroPiante?: boolean
    dataSemina?: boolean
    sistemazione?: boolean
    userId?: boolean
  }


  export type MyOrtoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    ortaggio?: boolean | OrtaggiDefaultArgs<ExtArgs>
    pianificazioni?: boolean | MyOrto$pianificazioniArgs<ExtArgs>
    _count?: boolean | MyOrtoCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $MyOrtoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MyOrto"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      ortaggio: Prisma.$OrtaggiPayload<ExtArgs>
      pianificazioni: Prisma.$PianificazioniPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      citta: string
      tipoPiantagione: string
      numeroPiante: number
      dataSemina: string
      sistemazione: string
      userId: number
    }, ExtArgs["result"]["myOrto"]>
    composites: {}
  }


  type MyOrtoGetPayload<S extends boolean | null | undefined | MyOrtoDefaultArgs> = $Result.GetResult<Prisma.$MyOrtoPayload, S>

  type MyOrtoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MyOrtoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MyOrtoCountAggregateInputType | true
    }

  export interface MyOrtoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MyOrto'], meta: { name: 'MyOrto' } }
    /**
     * Find zero or one MyOrto that matches the filter.
     * @param {MyOrtoFindUniqueArgs} args - Arguments to find a MyOrto
     * @example
     * // Get one MyOrto
     * const myOrto = await prisma.myOrto.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MyOrtoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, MyOrtoFindUniqueArgs<ExtArgs>>
    ): Prisma__MyOrtoClient<$Result.GetResult<Prisma.$MyOrtoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one MyOrto that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MyOrtoFindUniqueOrThrowArgs} args - Arguments to find a MyOrto
     * @example
     * // Get one MyOrto
     * const myOrto = await prisma.myOrto.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MyOrtoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MyOrtoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__MyOrtoClient<$Result.GetResult<Prisma.$MyOrtoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first MyOrto that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MyOrtoFindFirstArgs} args - Arguments to find a MyOrto
     * @example
     * // Get one MyOrto
     * const myOrto = await prisma.myOrto.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MyOrtoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, MyOrtoFindFirstArgs<ExtArgs>>
    ): Prisma__MyOrtoClient<$Result.GetResult<Prisma.$MyOrtoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first MyOrto that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MyOrtoFindFirstOrThrowArgs} args - Arguments to find a MyOrto
     * @example
     * // Get one MyOrto
     * const myOrto = await prisma.myOrto.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MyOrtoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MyOrtoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__MyOrtoClient<$Result.GetResult<Prisma.$MyOrtoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more MyOrtos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MyOrtoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MyOrtos
     * const myOrtos = await prisma.myOrto.findMany()
     * 
     * // Get first 10 MyOrtos
     * const myOrtos = await prisma.myOrto.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const myOrtoWithIdOnly = await prisma.myOrto.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MyOrtoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MyOrtoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MyOrtoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a MyOrto.
     * @param {MyOrtoCreateArgs} args - Arguments to create a MyOrto.
     * @example
     * // Create one MyOrto
     * const MyOrto = await prisma.myOrto.create({
     *   data: {
     *     // ... data to create a MyOrto
     *   }
     * })
     * 
    **/
    create<T extends MyOrtoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, MyOrtoCreateArgs<ExtArgs>>
    ): Prisma__MyOrtoClient<$Result.GetResult<Prisma.$MyOrtoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many MyOrtos.
     *     @param {MyOrtoCreateManyArgs} args - Arguments to create many MyOrtos.
     *     @example
     *     // Create many MyOrtos
     *     const myOrto = await prisma.myOrto.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MyOrtoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MyOrtoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a MyOrto.
     * @param {MyOrtoDeleteArgs} args - Arguments to delete one MyOrto.
     * @example
     * // Delete one MyOrto
     * const MyOrto = await prisma.myOrto.delete({
     *   where: {
     *     // ... filter to delete one MyOrto
     *   }
     * })
     * 
    **/
    delete<T extends MyOrtoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, MyOrtoDeleteArgs<ExtArgs>>
    ): Prisma__MyOrtoClient<$Result.GetResult<Prisma.$MyOrtoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one MyOrto.
     * @param {MyOrtoUpdateArgs} args - Arguments to update one MyOrto.
     * @example
     * // Update one MyOrto
     * const myOrto = await prisma.myOrto.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MyOrtoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, MyOrtoUpdateArgs<ExtArgs>>
    ): Prisma__MyOrtoClient<$Result.GetResult<Prisma.$MyOrtoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more MyOrtos.
     * @param {MyOrtoDeleteManyArgs} args - Arguments to filter MyOrtos to delete.
     * @example
     * // Delete a few MyOrtos
     * const { count } = await prisma.myOrto.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MyOrtoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MyOrtoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MyOrtos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MyOrtoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MyOrtos
     * const myOrto = await prisma.myOrto.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MyOrtoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, MyOrtoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MyOrto.
     * @param {MyOrtoUpsertArgs} args - Arguments to update or create a MyOrto.
     * @example
     * // Update or create a MyOrto
     * const myOrto = await prisma.myOrto.upsert({
     *   create: {
     *     // ... data to create a MyOrto
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MyOrto we want to update
     *   }
     * })
    **/
    upsert<T extends MyOrtoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, MyOrtoUpsertArgs<ExtArgs>>
    ): Prisma__MyOrtoClient<$Result.GetResult<Prisma.$MyOrtoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of MyOrtos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MyOrtoCountArgs} args - Arguments to filter MyOrtos to count.
     * @example
     * // Count the number of MyOrtos
     * const count = await prisma.myOrto.count({
     *   where: {
     *     // ... the filter for the MyOrtos we want to count
     *   }
     * })
    **/
    count<T extends MyOrtoCountArgs>(
      args?: Subset<T, MyOrtoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MyOrtoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MyOrto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MyOrtoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MyOrtoAggregateArgs>(args: Subset<T, MyOrtoAggregateArgs>): Prisma.PrismaPromise<GetMyOrtoAggregateType<T>>

    /**
     * Group by MyOrto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MyOrtoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MyOrtoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MyOrtoGroupByArgs['orderBy'] }
        : { orderBy?: MyOrtoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MyOrtoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMyOrtoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MyOrto model
   */
  readonly fields: MyOrtoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MyOrto.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MyOrtoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    ortaggio<T extends OrtaggiDefaultArgs<ExtArgs> = {}>(args?: Subset<T, OrtaggiDefaultArgs<ExtArgs>>): Prisma__OrtaggiClient<$Result.GetResult<Prisma.$OrtaggiPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    pianificazioni<T extends MyOrto$pianificazioniArgs<ExtArgs> = {}>(args?: Subset<T, MyOrto$pianificazioniArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PianificazioniPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the MyOrto model
   */ 
  interface MyOrtoFieldRefs {
    readonly id: FieldRef<"MyOrto", 'Int'>
    readonly nome: FieldRef<"MyOrto", 'String'>
    readonly citta: FieldRef<"MyOrto", 'String'>
    readonly tipoPiantagione: FieldRef<"MyOrto", 'String'>
    readonly numeroPiante: FieldRef<"MyOrto", 'Int'>
    readonly dataSemina: FieldRef<"MyOrto", 'String'>
    readonly sistemazione: FieldRef<"MyOrto", 'String'>
    readonly userId: FieldRef<"MyOrto", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * MyOrto findUnique
   */
  export type MyOrtoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MyOrto
     */
    select?: MyOrtoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MyOrtoInclude<ExtArgs> | null
    /**
     * Filter, which MyOrto to fetch.
     */
    where: MyOrtoWhereUniqueInput
  }

  /**
   * MyOrto findUniqueOrThrow
   */
  export type MyOrtoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MyOrto
     */
    select?: MyOrtoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MyOrtoInclude<ExtArgs> | null
    /**
     * Filter, which MyOrto to fetch.
     */
    where: MyOrtoWhereUniqueInput
  }

  /**
   * MyOrto findFirst
   */
  export type MyOrtoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MyOrto
     */
    select?: MyOrtoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MyOrtoInclude<ExtArgs> | null
    /**
     * Filter, which MyOrto to fetch.
     */
    where?: MyOrtoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MyOrtos to fetch.
     */
    orderBy?: MyOrtoOrderByWithRelationInput | MyOrtoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MyOrtos.
     */
    cursor?: MyOrtoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MyOrtos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MyOrtos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MyOrtos.
     */
    distinct?: MyOrtoScalarFieldEnum | MyOrtoScalarFieldEnum[]
  }

  /**
   * MyOrto findFirstOrThrow
   */
  export type MyOrtoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MyOrto
     */
    select?: MyOrtoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MyOrtoInclude<ExtArgs> | null
    /**
     * Filter, which MyOrto to fetch.
     */
    where?: MyOrtoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MyOrtos to fetch.
     */
    orderBy?: MyOrtoOrderByWithRelationInput | MyOrtoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MyOrtos.
     */
    cursor?: MyOrtoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MyOrtos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MyOrtos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MyOrtos.
     */
    distinct?: MyOrtoScalarFieldEnum | MyOrtoScalarFieldEnum[]
  }

  /**
   * MyOrto findMany
   */
  export type MyOrtoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MyOrto
     */
    select?: MyOrtoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MyOrtoInclude<ExtArgs> | null
    /**
     * Filter, which MyOrtos to fetch.
     */
    where?: MyOrtoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MyOrtos to fetch.
     */
    orderBy?: MyOrtoOrderByWithRelationInput | MyOrtoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MyOrtos.
     */
    cursor?: MyOrtoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MyOrtos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MyOrtos.
     */
    skip?: number
    distinct?: MyOrtoScalarFieldEnum | MyOrtoScalarFieldEnum[]
  }

  /**
   * MyOrto create
   */
  export type MyOrtoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MyOrto
     */
    select?: MyOrtoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MyOrtoInclude<ExtArgs> | null
    /**
     * The data needed to create a MyOrto.
     */
    data: XOR<MyOrtoCreateInput, MyOrtoUncheckedCreateInput>
  }

  /**
   * MyOrto createMany
   */
  export type MyOrtoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MyOrtos.
     */
    data: MyOrtoCreateManyInput | MyOrtoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MyOrto update
   */
  export type MyOrtoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MyOrto
     */
    select?: MyOrtoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MyOrtoInclude<ExtArgs> | null
    /**
     * The data needed to update a MyOrto.
     */
    data: XOR<MyOrtoUpdateInput, MyOrtoUncheckedUpdateInput>
    /**
     * Choose, which MyOrto to update.
     */
    where: MyOrtoWhereUniqueInput
  }

  /**
   * MyOrto updateMany
   */
  export type MyOrtoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MyOrtos.
     */
    data: XOR<MyOrtoUpdateManyMutationInput, MyOrtoUncheckedUpdateManyInput>
    /**
     * Filter which MyOrtos to update
     */
    where?: MyOrtoWhereInput
  }

  /**
   * MyOrto upsert
   */
  export type MyOrtoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MyOrto
     */
    select?: MyOrtoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MyOrtoInclude<ExtArgs> | null
    /**
     * The filter to search for the MyOrto to update in case it exists.
     */
    where: MyOrtoWhereUniqueInput
    /**
     * In case the MyOrto found by the `where` argument doesn't exist, create a new MyOrto with this data.
     */
    create: XOR<MyOrtoCreateInput, MyOrtoUncheckedCreateInput>
    /**
     * In case the MyOrto was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MyOrtoUpdateInput, MyOrtoUncheckedUpdateInput>
  }

  /**
   * MyOrto delete
   */
  export type MyOrtoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MyOrto
     */
    select?: MyOrtoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MyOrtoInclude<ExtArgs> | null
    /**
     * Filter which MyOrto to delete.
     */
    where: MyOrtoWhereUniqueInput
  }

  /**
   * MyOrto deleteMany
   */
  export type MyOrtoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MyOrtos to delete
     */
    where?: MyOrtoWhereInput
  }

  /**
   * MyOrto.pianificazioni
   */
  export type MyOrto$pianificazioniArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pianificazioni
     */
    select?: PianificazioniSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PianificazioniInclude<ExtArgs> | null
    where?: PianificazioniWhereInput
    orderBy?: PianificazioniOrderByWithRelationInput | PianificazioniOrderByWithRelationInput[]
    cursor?: PianificazioniWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PianificazioniScalarFieldEnum | PianificazioniScalarFieldEnum[]
  }

  /**
   * MyOrto without action
   */
  export type MyOrtoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MyOrto
     */
    select?: MyOrtoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MyOrtoInclude<ExtArgs> | null
  }


  /**
   * Model Pianificazioni
   */

  export type AggregatePianificazioni = {
    _count: PianificazioniCountAggregateOutputType | null
    _avg: PianificazioniAvgAggregateOutputType | null
    _sum: PianificazioniSumAggregateOutputType | null
    _min: PianificazioniMinAggregateOutputType | null
    _max: PianificazioniMaxAggregateOutputType | null
  }

  export type PianificazioniAvgAggregateOutputType = {
    id: number | null
    myOrtoId: number | null
  }

  export type PianificazioniSumAggregateOutputType = {
    id: number | null
    myOrtoId: number | null
  }

  export type PianificazioniMinAggregateOutputType = {
    id: number | null
    data: string | null
    attivita: string | null
    completata: boolean | null
    myOrtoId: number | null
  }

  export type PianificazioniMaxAggregateOutputType = {
    id: number | null
    data: string | null
    attivita: string | null
    completata: boolean | null
    myOrtoId: number | null
  }

  export type PianificazioniCountAggregateOutputType = {
    id: number
    data: number
    attivita: number
    completata: number
    myOrtoId: number
    _all: number
  }


  export type PianificazioniAvgAggregateInputType = {
    id?: true
    myOrtoId?: true
  }

  export type PianificazioniSumAggregateInputType = {
    id?: true
    myOrtoId?: true
  }

  export type PianificazioniMinAggregateInputType = {
    id?: true
    data?: true
    attivita?: true
    completata?: true
    myOrtoId?: true
  }

  export type PianificazioniMaxAggregateInputType = {
    id?: true
    data?: true
    attivita?: true
    completata?: true
    myOrtoId?: true
  }

  export type PianificazioniCountAggregateInputType = {
    id?: true
    data?: true
    attivita?: true
    completata?: true
    myOrtoId?: true
    _all?: true
  }

  export type PianificazioniAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pianificazioni to aggregate.
     */
    where?: PianificazioniWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pianificazionis to fetch.
     */
    orderBy?: PianificazioniOrderByWithRelationInput | PianificazioniOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PianificazioniWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pianificazionis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pianificazionis.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Pianificazionis
    **/
    _count?: true | PianificazioniCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PianificazioniAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PianificazioniSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PianificazioniMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PianificazioniMaxAggregateInputType
  }

  export type GetPianificazioniAggregateType<T extends PianificazioniAggregateArgs> = {
        [P in keyof T & keyof AggregatePianificazioni]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePianificazioni[P]>
      : GetScalarType<T[P], AggregatePianificazioni[P]>
  }




  export type PianificazioniGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PianificazioniWhereInput
    orderBy?: PianificazioniOrderByWithAggregationInput | PianificazioniOrderByWithAggregationInput[]
    by: PianificazioniScalarFieldEnum[] | PianificazioniScalarFieldEnum
    having?: PianificazioniScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PianificazioniCountAggregateInputType | true
    _avg?: PianificazioniAvgAggregateInputType
    _sum?: PianificazioniSumAggregateInputType
    _min?: PianificazioniMinAggregateInputType
    _max?: PianificazioniMaxAggregateInputType
  }

  export type PianificazioniGroupByOutputType = {
    id: number
    data: string
    attivita: string
    completata: boolean
    myOrtoId: number
    _count: PianificazioniCountAggregateOutputType | null
    _avg: PianificazioniAvgAggregateOutputType | null
    _sum: PianificazioniSumAggregateOutputType | null
    _min: PianificazioniMinAggregateOutputType | null
    _max: PianificazioniMaxAggregateOutputType | null
  }

  type GetPianificazioniGroupByPayload<T extends PianificazioniGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PianificazioniGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PianificazioniGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PianificazioniGroupByOutputType[P]>
            : GetScalarType<T[P], PianificazioniGroupByOutputType[P]>
        }
      >
    >


  export type PianificazioniSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    data?: boolean
    attivita?: boolean
    completata?: boolean
    myOrtoId?: boolean
    myOrto?: boolean | MyOrtoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pianificazioni"]>

  export type PianificazioniSelectScalar = {
    id?: boolean
    data?: boolean
    attivita?: boolean
    completata?: boolean
    myOrtoId?: boolean
  }


  export type PianificazioniInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    myOrto?: boolean | MyOrtoDefaultArgs<ExtArgs>
  }


  export type $PianificazioniPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Pianificazioni"
    objects: {
      myOrto: Prisma.$MyOrtoPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      data: string
      attivita: string
      completata: boolean
      myOrtoId: number
    }, ExtArgs["result"]["pianificazioni"]>
    composites: {}
  }


  type PianificazioniGetPayload<S extends boolean | null | undefined | PianificazioniDefaultArgs> = $Result.GetResult<Prisma.$PianificazioniPayload, S>

  type PianificazioniCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PianificazioniFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PianificazioniCountAggregateInputType | true
    }

  export interface PianificazioniDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Pianificazioni'], meta: { name: 'Pianificazioni' } }
    /**
     * Find zero or one Pianificazioni that matches the filter.
     * @param {PianificazioniFindUniqueArgs} args - Arguments to find a Pianificazioni
     * @example
     * // Get one Pianificazioni
     * const pianificazioni = await prisma.pianificazioni.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PianificazioniFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PianificazioniFindUniqueArgs<ExtArgs>>
    ): Prisma__PianificazioniClient<$Result.GetResult<Prisma.$PianificazioniPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Pianificazioni that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PianificazioniFindUniqueOrThrowArgs} args - Arguments to find a Pianificazioni
     * @example
     * // Get one Pianificazioni
     * const pianificazioni = await prisma.pianificazioni.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PianificazioniFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PianificazioniFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PianificazioniClient<$Result.GetResult<Prisma.$PianificazioniPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Pianificazioni that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PianificazioniFindFirstArgs} args - Arguments to find a Pianificazioni
     * @example
     * // Get one Pianificazioni
     * const pianificazioni = await prisma.pianificazioni.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PianificazioniFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PianificazioniFindFirstArgs<ExtArgs>>
    ): Prisma__PianificazioniClient<$Result.GetResult<Prisma.$PianificazioniPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Pianificazioni that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PianificazioniFindFirstOrThrowArgs} args - Arguments to find a Pianificazioni
     * @example
     * // Get one Pianificazioni
     * const pianificazioni = await prisma.pianificazioni.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PianificazioniFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PianificazioniFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PianificazioniClient<$Result.GetResult<Prisma.$PianificazioniPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Pianificazionis that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PianificazioniFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Pianificazionis
     * const pianificazionis = await prisma.pianificazioni.findMany()
     * 
     * // Get first 10 Pianificazionis
     * const pianificazionis = await prisma.pianificazioni.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pianificazioniWithIdOnly = await prisma.pianificazioni.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PianificazioniFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PianificazioniFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PianificazioniPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Pianificazioni.
     * @param {PianificazioniCreateArgs} args - Arguments to create a Pianificazioni.
     * @example
     * // Create one Pianificazioni
     * const Pianificazioni = await prisma.pianificazioni.create({
     *   data: {
     *     // ... data to create a Pianificazioni
     *   }
     * })
     * 
    **/
    create<T extends PianificazioniCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PianificazioniCreateArgs<ExtArgs>>
    ): Prisma__PianificazioniClient<$Result.GetResult<Prisma.$PianificazioniPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Pianificazionis.
     *     @param {PianificazioniCreateManyArgs} args - Arguments to create many Pianificazionis.
     *     @example
     *     // Create many Pianificazionis
     *     const pianificazioni = await prisma.pianificazioni.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PianificazioniCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PianificazioniCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Pianificazioni.
     * @param {PianificazioniDeleteArgs} args - Arguments to delete one Pianificazioni.
     * @example
     * // Delete one Pianificazioni
     * const Pianificazioni = await prisma.pianificazioni.delete({
     *   where: {
     *     // ... filter to delete one Pianificazioni
     *   }
     * })
     * 
    **/
    delete<T extends PianificazioniDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PianificazioniDeleteArgs<ExtArgs>>
    ): Prisma__PianificazioniClient<$Result.GetResult<Prisma.$PianificazioniPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Pianificazioni.
     * @param {PianificazioniUpdateArgs} args - Arguments to update one Pianificazioni.
     * @example
     * // Update one Pianificazioni
     * const pianificazioni = await prisma.pianificazioni.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PianificazioniUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PianificazioniUpdateArgs<ExtArgs>>
    ): Prisma__PianificazioniClient<$Result.GetResult<Prisma.$PianificazioniPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Pianificazionis.
     * @param {PianificazioniDeleteManyArgs} args - Arguments to filter Pianificazionis to delete.
     * @example
     * // Delete a few Pianificazionis
     * const { count } = await prisma.pianificazioni.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PianificazioniDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PianificazioniDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pianificazionis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PianificazioniUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Pianificazionis
     * const pianificazioni = await prisma.pianificazioni.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PianificazioniUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PianificazioniUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Pianificazioni.
     * @param {PianificazioniUpsertArgs} args - Arguments to update or create a Pianificazioni.
     * @example
     * // Update or create a Pianificazioni
     * const pianificazioni = await prisma.pianificazioni.upsert({
     *   create: {
     *     // ... data to create a Pianificazioni
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Pianificazioni we want to update
     *   }
     * })
    **/
    upsert<T extends PianificazioniUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PianificazioniUpsertArgs<ExtArgs>>
    ): Prisma__PianificazioniClient<$Result.GetResult<Prisma.$PianificazioniPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Pianificazionis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PianificazioniCountArgs} args - Arguments to filter Pianificazionis to count.
     * @example
     * // Count the number of Pianificazionis
     * const count = await prisma.pianificazioni.count({
     *   where: {
     *     // ... the filter for the Pianificazionis we want to count
     *   }
     * })
    **/
    count<T extends PianificazioniCountArgs>(
      args?: Subset<T, PianificazioniCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PianificazioniCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Pianificazioni.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PianificazioniAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PianificazioniAggregateArgs>(args: Subset<T, PianificazioniAggregateArgs>): Prisma.PrismaPromise<GetPianificazioniAggregateType<T>>

    /**
     * Group by Pianificazioni.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PianificazioniGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PianificazioniGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PianificazioniGroupByArgs['orderBy'] }
        : { orderBy?: PianificazioniGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PianificazioniGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPianificazioniGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Pianificazioni model
   */
  readonly fields: PianificazioniFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Pianificazioni.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PianificazioniClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    myOrto<T extends MyOrtoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MyOrtoDefaultArgs<ExtArgs>>): Prisma__MyOrtoClient<$Result.GetResult<Prisma.$MyOrtoPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Pianificazioni model
   */ 
  interface PianificazioniFieldRefs {
    readonly id: FieldRef<"Pianificazioni", 'Int'>
    readonly data: FieldRef<"Pianificazioni", 'String'>
    readonly attivita: FieldRef<"Pianificazioni", 'String'>
    readonly completata: FieldRef<"Pianificazioni", 'Boolean'>
    readonly myOrtoId: FieldRef<"Pianificazioni", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Pianificazioni findUnique
   */
  export type PianificazioniFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pianificazioni
     */
    select?: PianificazioniSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PianificazioniInclude<ExtArgs> | null
    /**
     * Filter, which Pianificazioni to fetch.
     */
    where: PianificazioniWhereUniqueInput
  }

  /**
   * Pianificazioni findUniqueOrThrow
   */
  export type PianificazioniFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pianificazioni
     */
    select?: PianificazioniSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PianificazioniInclude<ExtArgs> | null
    /**
     * Filter, which Pianificazioni to fetch.
     */
    where: PianificazioniWhereUniqueInput
  }

  /**
   * Pianificazioni findFirst
   */
  export type PianificazioniFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pianificazioni
     */
    select?: PianificazioniSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PianificazioniInclude<ExtArgs> | null
    /**
     * Filter, which Pianificazioni to fetch.
     */
    where?: PianificazioniWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pianificazionis to fetch.
     */
    orderBy?: PianificazioniOrderByWithRelationInput | PianificazioniOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pianificazionis.
     */
    cursor?: PianificazioniWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pianificazionis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pianificazionis.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pianificazionis.
     */
    distinct?: PianificazioniScalarFieldEnum | PianificazioniScalarFieldEnum[]
  }

  /**
   * Pianificazioni findFirstOrThrow
   */
  export type PianificazioniFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pianificazioni
     */
    select?: PianificazioniSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PianificazioniInclude<ExtArgs> | null
    /**
     * Filter, which Pianificazioni to fetch.
     */
    where?: PianificazioniWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pianificazionis to fetch.
     */
    orderBy?: PianificazioniOrderByWithRelationInput | PianificazioniOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pianificazionis.
     */
    cursor?: PianificazioniWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pianificazionis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pianificazionis.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pianificazionis.
     */
    distinct?: PianificazioniScalarFieldEnum | PianificazioniScalarFieldEnum[]
  }

  /**
   * Pianificazioni findMany
   */
  export type PianificazioniFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pianificazioni
     */
    select?: PianificazioniSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PianificazioniInclude<ExtArgs> | null
    /**
     * Filter, which Pianificazionis to fetch.
     */
    where?: PianificazioniWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pianificazionis to fetch.
     */
    orderBy?: PianificazioniOrderByWithRelationInput | PianificazioniOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Pianificazionis.
     */
    cursor?: PianificazioniWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pianificazionis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pianificazionis.
     */
    skip?: number
    distinct?: PianificazioniScalarFieldEnum | PianificazioniScalarFieldEnum[]
  }

  /**
   * Pianificazioni create
   */
  export type PianificazioniCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pianificazioni
     */
    select?: PianificazioniSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PianificazioniInclude<ExtArgs> | null
    /**
     * The data needed to create a Pianificazioni.
     */
    data: XOR<PianificazioniCreateInput, PianificazioniUncheckedCreateInput>
  }

  /**
   * Pianificazioni createMany
   */
  export type PianificazioniCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Pianificazionis.
     */
    data: PianificazioniCreateManyInput | PianificazioniCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Pianificazioni update
   */
  export type PianificazioniUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pianificazioni
     */
    select?: PianificazioniSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PianificazioniInclude<ExtArgs> | null
    /**
     * The data needed to update a Pianificazioni.
     */
    data: XOR<PianificazioniUpdateInput, PianificazioniUncheckedUpdateInput>
    /**
     * Choose, which Pianificazioni to update.
     */
    where: PianificazioniWhereUniqueInput
  }

  /**
   * Pianificazioni updateMany
   */
  export type PianificazioniUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Pianificazionis.
     */
    data: XOR<PianificazioniUpdateManyMutationInput, PianificazioniUncheckedUpdateManyInput>
    /**
     * Filter which Pianificazionis to update
     */
    where?: PianificazioniWhereInput
  }

  /**
   * Pianificazioni upsert
   */
  export type PianificazioniUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pianificazioni
     */
    select?: PianificazioniSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PianificazioniInclude<ExtArgs> | null
    /**
     * The filter to search for the Pianificazioni to update in case it exists.
     */
    where: PianificazioniWhereUniqueInput
    /**
     * In case the Pianificazioni found by the `where` argument doesn't exist, create a new Pianificazioni with this data.
     */
    create: XOR<PianificazioniCreateInput, PianificazioniUncheckedCreateInput>
    /**
     * In case the Pianificazioni was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PianificazioniUpdateInput, PianificazioniUncheckedUpdateInput>
  }

  /**
   * Pianificazioni delete
   */
  export type PianificazioniDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pianificazioni
     */
    select?: PianificazioniSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PianificazioniInclude<ExtArgs> | null
    /**
     * Filter which Pianificazioni to delete.
     */
    where: PianificazioniWhereUniqueInput
  }

  /**
   * Pianificazioni deleteMany
   */
  export type PianificazioniDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pianificazionis to delete
     */
    where?: PianificazioniWhereInput
  }

  /**
   * Pianificazioni without action
   */
  export type PianificazioniDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pianificazioni
     */
    select?: PianificazioniSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PianificazioniInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    firstName: 'firstName',
    lastName: 'lastName',
    email: 'email'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const CredentialScalarFieldEnum: {
    userId: 'userId',
    password: 'password'
  };

  export type CredentialScalarFieldEnum = (typeof CredentialScalarFieldEnum)[keyof typeof CredentialScalarFieldEnum]


  export const OrtaggiScalarFieldEnum: {
    nome: 'nome',
    periodoColtivazione: 'periodoColtivazione',
    esposizione: 'esposizione',
    tempiMaturazione: 'tempiMaturazione',
    tipoTerreno: 'tipoTerreno',
    distanzaPiantagione: 'distanzaPiantagione',
    profonditaSemina: 'profonditaSemina',
    temperaturaMin: 'temperaturaMin',
    temperaturaMax: 'temperaturaMax',
    frequenzaInnaffiatura: 'frequenzaInnaffiatura',
    note: 'note'
  };

  export type OrtaggiScalarFieldEnum = (typeof OrtaggiScalarFieldEnum)[keyof typeof OrtaggiScalarFieldEnum]


  export const GlossarioScalarFieldEnum: {
    parola: 'parola',
    definizione: 'definizione'
  };

  export type GlossarioScalarFieldEnum = (typeof GlossarioScalarFieldEnum)[keyof typeof GlossarioScalarFieldEnum]


  export const MyOrtoScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    citta: 'citta',
    tipoPiantagione: 'tipoPiantagione',
    numeroPiante: 'numeroPiante',
    dataSemina: 'dataSemina',
    sistemazione: 'sistemazione',
    userId: 'userId'
  };

  export type MyOrtoScalarFieldEnum = (typeof MyOrtoScalarFieldEnum)[keyof typeof MyOrtoScalarFieldEnum]


  export const PianificazioniScalarFieldEnum: {
    id: 'id',
    data: 'data',
    attivita: 'attivita',
    completata: 'completata',
    myOrtoId: 'myOrtoId'
  };

  export type PianificazioniScalarFieldEnum = (typeof PianificazioniScalarFieldEnum)[keyof typeof PianificazioniScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    credentials?: XOR<CredentialNullableRelationFilter, CredentialWhereInput> | null
    myorti?: MyOrtoListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    credentials?: CredentialOrderByWithRelationInput
    myorti?: MyOrtoOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    credentials?: XOR<CredentialNullableRelationFilter, CredentialWhereInput> | null
    myorti?: MyOrtoListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    firstName?: StringWithAggregatesFilter<"User"> | string
    lastName?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
  }

  export type CredentialWhereInput = {
    AND?: CredentialWhereInput | CredentialWhereInput[]
    OR?: CredentialWhereInput[]
    NOT?: CredentialWhereInput | CredentialWhereInput[]
    userId?: IntFilter<"Credential"> | number
    password?: StringFilter<"Credential"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type CredentialOrderByWithRelationInput = {
    userId?: SortOrder
    password?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type CredentialWhereUniqueInput = Prisma.AtLeast<{
    userId?: number
    AND?: CredentialWhereInput | CredentialWhereInput[]
    OR?: CredentialWhereInput[]
    NOT?: CredentialWhereInput | CredentialWhereInput[]
    password?: StringFilter<"Credential"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "userId">

  export type CredentialOrderByWithAggregationInput = {
    userId?: SortOrder
    password?: SortOrder
    _count?: CredentialCountOrderByAggregateInput
    _avg?: CredentialAvgOrderByAggregateInput
    _max?: CredentialMaxOrderByAggregateInput
    _min?: CredentialMinOrderByAggregateInput
    _sum?: CredentialSumOrderByAggregateInput
  }

  export type CredentialScalarWhereWithAggregatesInput = {
    AND?: CredentialScalarWhereWithAggregatesInput | CredentialScalarWhereWithAggregatesInput[]
    OR?: CredentialScalarWhereWithAggregatesInput[]
    NOT?: CredentialScalarWhereWithAggregatesInput | CredentialScalarWhereWithAggregatesInput[]
    userId?: IntWithAggregatesFilter<"Credential"> | number
    password?: StringWithAggregatesFilter<"Credential"> | string
  }

  export type OrtaggiWhereInput = {
    AND?: OrtaggiWhereInput | OrtaggiWhereInput[]
    OR?: OrtaggiWhereInput[]
    NOT?: OrtaggiWhereInput | OrtaggiWhereInput[]
    nome?: StringFilter<"Ortaggi"> | string
    periodoColtivazione?: StringFilter<"Ortaggi"> | string
    esposizione?: StringFilter<"Ortaggi"> | string
    tempiMaturazione?: IntFilter<"Ortaggi"> | number
    tipoTerreno?: StringFilter<"Ortaggi"> | string
    distanzaPiantagione?: StringFilter<"Ortaggi"> | string
    profonditaSemina?: StringFilter<"Ortaggi"> | string
    temperaturaMin?: StringFilter<"Ortaggi"> | string
    temperaturaMax?: StringFilter<"Ortaggi"> | string
    frequenzaInnaffiatura?: IntFilter<"Ortaggi"> | number
    note?: StringFilter<"Ortaggi"> | string
    myorti?: MyOrtoListRelationFilter
  }

  export type OrtaggiOrderByWithRelationInput = {
    nome?: SortOrder
    periodoColtivazione?: SortOrder
    esposizione?: SortOrder
    tempiMaturazione?: SortOrder
    tipoTerreno?: SortOrder
    distanzaPiantagione?: SortOrder
    profonditaSemina?: SortOrder
    temperaturaMin?: SortOrder
    temperaturaMax?: SortOrder
    frequenzaInnaffiatura?: SortOrder
    note?: SortOrder
    myorti?: MyOrtoOrderByRelationAggregateInput
  }

  export type OrtaggiWhereUniqueInput = Prisma.AtLeast<{
    nome?: string
    AND?: OrtaggiWhereInput | OrtaggiWhereInput[]
    OR?: OrtaggiWhereInput[]
    NOT?: OrtaggiWhereInput | OrtaggiWhereInput[]
    periodoColtivazione?: StringFilter<"Ortaggi"> | string
    esposizione?: StringFilter<"Ortaggi"> | string
    tempiMaturazione?: IntFilter<"Ortaggi"> | number
    tipoTerreno?: StringFilter<"Ortaggi"> | string
    distanzaPiantagione?: StringFilter<"Ortaggi"> | string
    profonditaSemina?: StringFilter<"Ortaggi"> | string
    temperaturaMin?: StringFilter<"Ortaggi"> | string
    temperaturaMax?: StringFilter<"Ortaggi"> | string
    frequenzaInnaffiatura?: IntFilter<"Ortaggi"> | number
    note?: StringFilter<"Ortaggi"> | string
    myorti?: MyOrtoListRelationFilter
  }, "nome">

  export type OrtaggiOrderByWithAggregationInput = {
    nome?: SortOrder
    periodoColtivazione?: SortOrder
    esposizione?: SortOrder
    tempiMaturazione?: SortOrder
    tipoTerreno?: SortOrder
    distanzaPiantagione?: SortOrder
    profonditaSemina?: SortOrder
    temperaturaMin?: SortOrder
    temperaturaMax?: SortOrder
    frequenzaInnaffiatura?: SortOrder
    note?: SortOrder
    _count?: OrtaggiCountOrderByAggregateInput
    _avg?: OrtaggiAvgOrderByAggregateInput
    _max?: OrtaggiMaxOrderByAggregateInput
    _min?: OrtaggiMinOrderByAggregateInput
    _sum?: OrtaggiSumOrderByAggregateInput
  }

  export type OrtaggiScalarWhereWithAggregatesInput = {
    AND?: OrtaggiScalarWhereWithAggregatesInput | OrtaggiScalarWhereWithAggregatesInput[]
    OR?: OrtaggiScalarWhereWithAggregatesInput[]
    NOT?: OrtaggiScalarWhereWithAggregatesInput | OrtaggiScalarWhereWithAggregatesInput[]
    nome?: StringWithAggregatesFilter<"Ortaggi"> | string
    periodoColtivazione?: StringWithAggregatesFilter<"Ortaggi"> | string
    esposizione?: StringWithAggregatesFilter<"Ortaggi"> | string
    tempiMaturazione?: IntWithAggregatesFilter<"Ortaggi"> | number
    tipoTerreno?: StringWithAggregatesFilter<"Ortaggi"> | string
    distanzaPiantagione?: StringWithAggregatesFilter<"Ortaggi"> | string
    profonditaSemina?: StringWithAggregatesFilter<"Ortaggi"> | string
    temperaturaMin?: StringWithAggregatesFilter<"Ortaggi"> | string
    temperaturaMax?: StringWithAggregatesFilter<"Ortaggi"> | string
    frequenzaInnaffiatura?: IntWithAggregatesFilter<"Ortaggi"> | number
    note?: StringWithAggregatesFilter<"Ortaggi"> | string
  }

  export type GlossarioWhereInput = {
    AND?: GlossarioWhereInput | GlossarioWhereInput[]
    OR?: GlossarioWhereInput[]
    NOT?: GlossarioWhereInput | GlossarioWhereInput[]
    parola?: StringFilter<"Glossario"> | string
    definizione?: StringFilter<"Glossario"> | string
  }

  export type GlossarioOrderByWithRelationInput = {
    parola?: SortOrder
    definizione?: SortOrder
  }

  export type GlossarioWhereUniqueInput = Prisma.AtLeast<{
    parola?: string
    AND?: GlossarioWhereInput | GlossarioWhereInput[]
    OR?: GlossarioWhereInput[]
    NOT?: GlossarioWhereInput | GlossarioWhereInput[]
    definizione?: StringFilter<"Glossario"> | string
  }, "parola">

  export type GlossarioOrderByWithAggregationInput = {
    parola?: SortOrder
    definizione?: SortOrder
    _count?: GlossarioCountOrderByAggregateInput
    _max?: GlossarioMaxOrderByAggregateInput
    _min?: GlossarioMinOrderByAggregateInput
  }

  export type GlossarioScalarWhereWithAggregatesInput = {
    AND?: GlossarioScalarWhereWithAggregatesInput | GlossarioScalarWhereWithAggregatesInput[]
    OR?: GlossarioScalarWhereWithAggregatesInput[]
    NOT?: GlossarioScalarWhereWithAggregatesInput | GlossarioScalarWhereWithAggregatesInput[]
    parola?: StringWithAggregatesFilter<"Glossario"> | string
    definizione?: StringWithAggregatesFilter<"Glossario"> | string
  }

  export type MyOrtoWhereInput = {
    AND?: MyOrtoWhereInput | MyOrtoWhereInput[]
    OR?: MyOrtoWhereInput[]
    NOT?: MyOrtoWhereInput | MyOrtoWhereInput[]
    id?: IntFilter<"MyOrto"> | number
    nome?: StringFilter<"MyOrto"> | string
    citta?: StringFilter<"MyOrto"> | string
    tipoPiantagione?: StringFilter<"MyOrto"> | string
    numeroPiante?: IntFilter<"MyOrto"> | number
    dataSemina?: StringFilter<"MyOrto"> | string
    sistemazione?: StringFilter<"MyOrto"> | string
    userId?: IntFilter<"MyOrto"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    ortaggio?: XOR<OrtaggiRelationFilter, OrtaggiWhereInput>
    pianificazioni?: PianificazioniListRelationFilter
  }

  export type MyOrtoOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    citta?: SortOrder
    tipoPiantagione?: SortOrder
    numeroPiante?: SortOrder
    dataSemina?: SortOrder
    sistemazione?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
    ortaggio?: OrtaggiOrderByWithRelationInput
    pianificazioni?: PianificazioniOrderByRelationAggregateInput
  }

  export type MyOrtoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MyOrtoWhereInput | MyOrtoWhereInput[]
    OR?: MyOrtoWhereInput[]
    NOT?: MyOrtoWhereInput | MyOrtoWhereInput[]
    nome?: StringFilter<"MyOrto"> | string
    citta?: StringFilter<"MyOrto"> | string
    tipoPiantagione?: StringFilter<"MyOrto"> | string
    numeroPiante?: IntFilter<"MyOrto"> | number
    dataSemina?: StringFilter<"MyOrto"> | string
    sistemazione?: StringFilter<"MyOrto"> | string
    userId?: IntFilter<"MyOrto"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    ortaggio?: XOR<OrtaggiRelationFilter, OrtaggiWhereInput>
    pianificazioni?: PianificazioniListRelationFilter
  }, "id">

  export type MyOrtoOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    citta?: SortOrder
    tipoPiantagione?: SortOrder
    numeroPiante?: SortOrder
    dataSemina?: SortOrder
    sistemazione?: SortOrder
    userId?: SortOrder
    _count?: MyOrtoCountOrderByAggregateInput
    _avg?: MyOrtoAvgOrderByAggregateInput
    _max?: MyOrtoMaxOrderByAggregateInput
    _min?: MyOrtoMinOrderByAggregateInput
    _sum?: MyOrtoSumOrderByAggregateInput
  }

  export type MyOrtoScalarWhereWithAggregatesInput = {
    AND?: MyOrtoScalarWhereWithAggregatesInput | MyOrtoScalarWhereWithAggregatesInput[]
    OR?: MyOrtoScalarWhereWithAggregatesInput[]
    NOT?: MyOrtoScalarWhereWithAggregatesInput | MyOrtoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"MyOrto"> | number
    nome?: StringWithAggregatesFilter<"MyOrto"> | string
    citta?: StringWithAggregatesFilter<"MyOrto"> | string
    tipoPiantagione?: StringWithAggregatesFilter<"MyOrto"> | string
    numeroPiante?: IntWithAggregatesFilter<"MyOrto"> | number
    dataSemina?: StringWithAggregatesFilter<"MyOrto"> | string
    sistemazione?: StringWithAggregatesFilter<"MyOrto"> | string
    userId?: IntWithAggregatesFilter<"MyOrto"> | number
  }

  export type PianificazioniWhereInput = {
    AND?: PianificazioniWhereInput | PianificazioniWhereInput[]
    OR?: PianificazioniWhereInput[]
    NOT?: PianificazioniWhereInput | PianificazioniWhereInput[]
    id?: IntFilter<"Pianificazioni"> | number
    data?: StringFilter<"Pianificazioni"> | string
    attivita?: StringFilter<"Pianificazioni"> | string
    completata?: BoolFilter<"Pianificazioni"> | boolean
    myOrtoId?: IntFilter<"Pianificazioni"> | number
    myOrto?: XOR<MyOrtoRelationFilter, MyOrtoWhereInput>
  }

  export type PianificazioniOrderByWithRelationInput = {
    id?: SortOrder
    data?: SortOrder
    attivita?: SortOrder
    completata?: SortOrder
    myOrtoId?: SortOrder
    myOrto?: MyOrtoOrderByWithRelationInput
  }

  export type PianificazioniWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PianificazioniWhereInput | PianificazioniWhereInput[]
    OR?: PianificazioniWhereInput[]
    NOT?: PianificazioniWhereInput | PianificazioniWhereInput[]
    data?: StringFilter<"Pianificazioni"> | string
    attivita?: StringFilter<"Pianificazioni"> | string
    completata?: BoolFilter<"Pianificazioni"> | boolean
    myOrtoId?: IntFilter<"Pianificazioni"> | number
    myOrto?: XOR<MyOrtoRelationFilter, MyOrtoWhereInput>
  }, "id">

  export type PianificazioniOrderByWithAggregationInput = {
    id?: SortOrder
    data?: SortOrder
    attivita?: SortOrder
    completata?: SortOrder
    myOrtoId?: SortOrder
    _count?: PianificazioniCountOrderByAggregateInput
    _avg?: PianificazioniAvgOrderByAggregateInput
    _max?: PianificazioniMaxOrderByAggregateInput
    _min?: PianificazioniMinOrderByAggregateInput
    _sum?: PianificazioniSumOrderByAggregateInput
  }

  export type PianificazioniScalarWhereWithAggregatesInput = {
    AND?: PianificazioniScalarWhereWithAggregatesInput | PianificazioniScalarWhereWithAggregatesInput[]
    OR?: PianificazioniScalarWhereWithAggregatesInput[]
    NOT?: PianificazioniScalarWhereWithAggregatesInput | PianificazioniScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Pianificazioni"> | number
    data?: StringWithAggregatesFilter<"Pianificazioni"> | string
    attivita?: StringWithAggregatesFilter<"Pianificazioni"> | string
    completata?: BoolWithAggregatesFilter<"Pianificazioni"> | boolean
    myOrtoId?: IntWithAggregatesFilter<"Pianificazioni"> | number
  }

  export type UserCreateInput = {
    firstName: string
    lastName: string
    email: string
    credentials?: CredentialCreateNestedOneWithoutUserInput
    myorti?: MyOrtoCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    firstName: string
    lastName: string
    email: string
    credentials?: CredentialUncheckedCreateNestedOneWithoutUserInput
    myorti?: MyOrtoUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    credentials?: CredentialUpdateOneWithoutUserNestedInput
    myorti?: MyOrtoUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    credentials?: CredentialUncheckedUpdateOneWithoutUserNestedInput
    myorti?: MyOrtoUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    firstName: string
    lastName: string
    email: string
  }

  export type UserUpdateManyMutationInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
  }

  export type CredentialCreateInput = {
    password: string
    user: UserCreateNestedOneWithoutCredentialsInput
  }

  export type CredentialUncheckedCreateInput = {
    userId: number
    password: string
  }

  export type CredentialUpdateInput = {
    password?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutCredentialsNestedInput
  }

  export type CredentialUncheckedUpdateInput = {
    userId?: IntFieldUpdateOperationsInput | number
    password?: StringFieldUpdateOperationsInput | string
  }

  export type CredentialCreateManyInput = {
    userId: number
    password: string
  }

  export type CredentialUpdateManyMutationInput = {
    password?: StringFieldUpdateOperationsInput | string
  }

  export type CredentialUncheckedUpdateManyInput = {
    userId?: IntFieldUpdateOperationsInput | number
    password?: StringFieldUpdateOperationsInput | string
  }

  export type OrtaggiCreateInput = {
    nome: string
    periodoColtivazione: string
    esposizione: string
    tempiMaturazione: number
    tipoTerreno: string
    distanzaPiantagione: string
    profonditaSemina: string
    temperaturaMin: string
    temperaturaMax: string
    frequenzaInnaffiatura: number
    note: string
    myorti?: MyOrtoCreateNestedManyWithoutOrtaggioInput
  }

  export type OrtaggiUncheckedCreateInput = {
    nome: string
    periodoColtivazione: string
    esposizione: string
    tempiMaturazione: number
    tipoTerreno: string
    distanzaPiantagione: string
    profonditaSemina: string
    temperaturaMin: string
    temperaturaMax: string
    frequenzaInnaffiatura: number
    note: string
    myorti?: MyOrtoUncheckedCreateNestedManyWithoutOrtaggioInput
  }

  export type OrtaggiUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    periodoColtivazione?: StringFieldUpdateOperationsInput | string
    esposizione?: StringFieldUpdateOperationsInput | string
    tempiMaturazione?: IntFieldUpdateOperationsInput | number
    tipoTerreno?: StringFieldUpdateOperationsInput | string
    distanzaPiantagione?: StringFieldUpdateOperationsInput | string
    profonditaSemina?: StringFieldUpdateOperationsInput | string
    temperaturaMin?: StringFieldUpdateOperationsInput | string
    temperaturaMax?: StringFieldUpdateOperationsInput | string
    frequenzaInnaffiatura?: IntFieldUpdateOperationsInput | number
    note?: StringFieldUpdateOperationsInput | string
    myorti?: MyOrtoUpdateManyWithoutOrtaggioNestedInput
  }

  export type OrtaggiUncheckedUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    periodoColtivazione?: StringFieldUpdateOperationsInput | string
    esposizione?: StringFieldUpdateOperationsInput | string
    tempiMaturazione?: IntFieldUpdateOperationsInput | number
    tipoTerreno?: StringFieldUpdateOperationsInput | string
    distanzaPiantagione?: StringFieldUpdateOperationsInput | string
    profonditaSemina?: StringFieldUpdateOperationsInput | string
    temperaturaMin?: StringFieldUpdateOperationsInput | string
    temperaturaMax?: StringFieldUpdateOperationsInput | string
    frequenzaInnaffiatura?: IntFieldUpdateOperationsInput | number
    note?: StringFieldUpdateOperationsInput | string
    myorti?: MyOrtoUncheckedUpdateManyWithoutOrtaggioNestedInput
  }

  export type OrtaggiCreateManyInput = {
    nome: string
    periodoColtivazione: string
    esposizione: string
    tempiMaturazione: number
    tipoTerreno: string
    distanzaPiantagione: string
    profonditaSemina: string
    temperaturaMin: string
    temperaturaMax: string
    frequenzaInnaffiatura: number
    note: string
  }

  export type OrtaggiUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    periodoColtivazione?: StringFieldUpdateOperationsInput | string
    esposizione?: StringFieldUpdateOperationsInput | string
    tempiMaturazione?: IntFieldUpdateOperationsInput | number
    tipoTerreno?: StringFieldUpdateOperationsInput | string
    distanzaPiantagione?: StringFieldUpdateOperationsInput | string
    profonditaSemina?: StringFieldUpdateOperationsInput | string
    temperaturaMin?: StringFieldUpdateOperationsInput | string
    temperaturaMax?: StringFieldUpdateOperationsInput | string
    frequenzaInnaffiatura?: IntFieldUpdateOperationsInput | number
    note?: StringFieldUpdateOperationsInput | string
  }

  export type OrtaggiUncheckedUpdateManyInput = {
    nome?: StringFieldUpdateOperationsInput | string
    periodoColtivazione?: StringFieldUpdateOperationsInput | string
    esposizione?: StringFieldUpdateOperationsInput | string
    tempiMaturazione?: IntFieldUpdateOperationsInput | number
    tipoTerreno?: StringFieldUpdateOperationsInput | string
    distanzaPiantagione?: StringFieldUpdateOperationsInput | string
    profonditaSemina?: StringFieldUpdateOperationsInput | string
    temperaturaMin?: StringFieldUpdateOperationsInput | string
    temperaturaMax?: StringFieldUpdateOperationsInput | string
    frequenzaInnaffiatura?: IntFieldUpdateOperationsInput | number
    note?: StringFieldUpdateOperationsInput | string
  }

  export type GlossarioCreateInput = {
    parola: string
    definizione: string
  }

  export type GlossarioUncheckedCreateInput = {
    parola: string
    definizione: string
  }

  export type GlossarioUpdateInput = {
    parola?: StringFieldUpdateOperationsInput | string
    definizione?: StringFieldUpdateOperationsInput | string
  }

  export type GlossarioUncheckedUpdateInput = {
    parola?: StringFieldUpdateOperationsInput | string
    definizione?: StringFieldUpdateOperationsInput | string
  }

  export type GlossarioCreateManyInput = {
    parola: string
    definizione: string
  }

  export type GlossarioUpdateManyMutationInput = {
    parola?: StringFieldUpdateOperationsInput | string
    definizione?: StringFieldUpdateOperationsInput | string
  }

  export type GlossarioUncheckedUpdateManyInput = {
    parola?: StringFieldUpdateOperationsInput | string
    definizione?: StringFieldUpdateOperationsInput | string
  }

  export type MyOrtoCreateInput = {
    nome: string
    citta: string
    numeroPiante: number
    dataSemina: string
    sistemazione: string
    user: UserCreateNestedOneWithoutMyortiInput
    ortaggio: OrtaggiCreateNestedOneWithoutMyortiInput
    pianificazioni?: PianificazioniCreateNestedManyWithoutMyOrtoInput
  }

  export type MyOrtoUncheckedCreateInput = {
    id?: number
    nome: string
    citta: string
    tipoPiantagione: string
    numeroPiante: number
    dataSemina: string
    sistemazione: string
    userId: number
    pianificazioni?: PianificazioniUncheckedCreateNestedManyWithoutMyOrtoInput
  }

  export type MyOrtoUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    citta?: StringFieldUpdateOperationsInput | string
    numeroPiante?: IntFieldUpdateOperationsInput | number
    dataSemina?: StringFieldUpdateOperationsInput | string
    sistemazione?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutMyortiNestedInput
    ortaggio?: OrtaggiUpdateOneRequiredWithoutMyortiNestedInput
    pianificazioni?: PianificazioniUpdateManyWithoutMyOrtoNestedInput
  }

  export type MyOrtoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    citta?: StringFieldUpdateOperationsInput | string
    tipoPiantagione?: StringFieldUpdateOperationsInput | string
    numeroPiante?: IntFieldUpdateOperationsInput | number
    dataSemina?: StringFieldUpdateOperationsInput | string
    sistemazione?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    pianificazioni?: PianificazioniUncheckedUpdateManyWithoutMyOrtoNestedInput
  }

  export type MyOrtoCreateManyInput = {
    id?: number
    nome: string
    citta: string
    tipoPiantagione: string
    numeroPiante: number
    dataSemina: string
    sistemazione: string
    userId: number
  }

  export type MyOrtoUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    citta?: StringFieldUpdateOperationsInput | string
    numeroPiante?: IntFieldUpdateOperationsInput | number
    dataSemina?: StringFieldUpdateOperationsInput | string
    sistemazione?: StringFieldUpdateOperationsInput | string
  }

  export type MyOrtoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    citta?: StringFieldUpdateOperationsInput | string
    tipoPiantagione?: StringFieldUpdateOperationsInput | string
    numeroPiante?: IntFieldUpdateOperationsInput | number
    dataSemina?: StringFieldUpdateOperationsInput | string
    sistemazione?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type PianificazioniCreateInput = {
    data: string
    attivita: string
    completata: boolean
    myOrto: MyOrtoCreateNestedOneWithoutPianificazioniInput
  }

  export type PianificazioniUncheckedCreateInput = {
    id?: number
    data: string
    attivita: string
    completata: boolean
    myOrtoId: number
  }

  export type PianificazioniUpdateInput = {
    data?: StringFieldUpdateOperationsInput | string
    attivita?: StringFieldUpdateOperationsInput | string
    completata?: BoolFieldUpdateOperationsInput | boolean
    myOrto?: MyOrtoUpdateOneRequiredWithoutPianificazioniNestedInput
  }

  export type PianificazioniUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    data?: StringFieldUpdateOperationsInput | string
    attivita?: StringFieldUpdateOperationsInput | string
    completata?: BoolFieldUpdateOperationsInput | boolean
    myOrtoId?: IntFieldUpdateOperationsInput | number
  }

  export type PianificazioniCreateManyInput = {
    id?: number
    data: string
    attivita: string
    completata: boolean
    myOrtoId: number
  }

  export type PianificazioniUpdateManyMutationInput = {
    data?: StringFieldUpdateOperationsInput | string
    attivita?: StringFieldUpdateOperationsInput | string
    completata?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PianificazioniUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    data?: StringFieldUpdateOperationsInput | string
    attivita?: StringFieldUpdateOperationsInput | string
    completata?: BoolFieldUpdateOperationsInput | boolean
    myOrtoId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type CredentialNullableRelationFilter = {
    is?: CredentialWhereInput | null
    isNot?: CredentialWhereInput | null
  }

  export type MyOrtoListRelationFilter = {
    every?: MyOrtoWhereInput
    some?: MyOrtoWhereInput
    none?: MyOrtoWhereInput
  }

  export type MyOrtoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type CredentialCountOrderByAggregateInput = {
    userId?: SortOrder
    password?: SortOrder
  }

  export type CredentialAvgOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type CredentialMaxOrderByAggregateInput = {
    userId?: SortOrder
    password?: SortOrder
  }

  export type CredentialMinOrderByAggregateInput = {
    userId?: SortOrder
    password?: SortOrder
  }

  export type CredentialSumOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type OrtaggiCountOrderByAggregateInput = {
    nome?: SortOrder
    periodoColtivazione?: SortOrder
    esposizione?: SortOrder
    tempiMaturazione?: SortOrder
    tipoTerreno?: SortOrder
    distanzaPiantagione?: SortOrder
    profonditaSemina?: SortOrder
    temperaturaMin?: SortOrder
    temperaturaMax?: SortOrder
    frequenzaInnaffiatura?: SortOrder
    note?: SortOrder
  }

  export type OrtaggiAvgOrderByAggregateInput = {
    tempiMaturazione?: SortOrder
    frequenzaInnaffiatura?: SortOrder
  }

  export type OrtaggiMaxOrderByAggregateInput = {
    nome?: SortOrder
    periodoColtivazione?: SortOrder
    esposizione?: SortOrder
    tempiMaturazione?: SortOrder
    tipoTerreno?: SortOrder
    distanzaPiantagione?: SortOrder
    profonditaSemina?: SortOrder
    temperaturaMin?: SortOrder
    temperaturaMax?: SortOrder
    frequenzaInnaffiatura?: SortOrder
    note?: SortOrder
  }

  export type OrtaggiMinOrderByAggregateInput = {
    nome?: SortOrder
    periodoColtivazione?: SortOrder
    esposizione?: SortOrder
    tempiMaturazione?: SortOrder
    tipoTerreno?: SortOrder
    distanzaPiantagione?: SortOrder
    profonditaSemina?: SortOrder
    temperaturaMin?: SortOrder
    temperaturaMax?: SortOrder
    frequenzaInnaffiatura?: SortOrder
    note?: SortOrder
  }

  export type OrtaggiSumOrderByAggregateInput = {
    tempiMaturazione?: SortOrder
    frequenzaInnaffiatura?: SortOrder
  }

  export type GlossarioCountOrderByAggregateInput = {
    parola?: SortOrder
    definizione?: SortOrder
  }

  export type GlossarioMaxOrderByAggregateInput = {
    parola?: SortOrder
    definizione?: SortOrder
  }

  export type GlossarioMinOrderByAggregateInput = {
    parola?: SortOrder
    definizione?: SortOrder
  }

  export type OrtaggiRelationFilter = {
    is?: OrtaggiWhereInput
    isNot?: OrtaggiWhereInput
  }

  export type PianificazioniListRelationFilter = {
    every?: PianificazioniWhereInput
    some?: PianificazioniWhereInput
    none?: PianificazioniWhereInput
  }

  export type PianificazioniOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MyOrtoCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    citta?: SortOrder
    tipoPiantagione?: SortOrder
    numeroPiante?: SortOrder
    dataSemina?: SortOrder
    sistemazione?: SortOrder
    userId?: SortOrder
  }

  export type MyOrtoAvgOrderByAggregateInput = {
    id?: SortOrder
    numeroPiante?: SortOrder
    userId?: SortOrder
  }

  export type MyOrtoMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    citta?: SortOrder
    tipoPiantagione?: SortOrder
    numeroPiante?: SortOrder
    dataSemina?: SortOrder
    sistemazione?: SortOrder
    userId?: SortOrder
  }

  export type MyOrtoMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    citta?: SortOrder
    tipoPiantagione?: SortOrder
    numeroPiante?: SortOrder
    dataSemina?: SortOrder
    sistemazione?: SortOrder
    userId?: SortOrder
  }

  export type MyOrtoSumOrderByAggregateInput = {
    id?: SortOrder
    numeroPiante?: SortOrder
    userId?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type MyOrtoRelationFilter = {
    is?: MyOrtoWhereInput
    isNot?: MyOrtoWhereInput
  }

  export type PianificazioniCountOrderByAggregateInput = {
    id?: SortOrder
    data?: SortOrder
    attivita?: SortOrder
    completata?: SortOrder
    myOrtoId?: SortOrder
  }

  export type PianificazioniAvgOrderByAggregateInput = {
    id?: SortOrder
    myOrtoId?: SortOrder
  }

  export type PianificazioniMaxOrderByAggregateInput = {
    id?: SortOrder
    data?: SortOrder
    attivita?: SortOrder
    completata?: SortOrder
    myOrtoId?: SortOrder
  }

  export type PianificazioniMinOrderByAggregateInput = {
    id?: SortOrder
    data?: SortOrder
    attivita?: SortOrder
    completata?: SortOrder
    myOrtoId?: SortOrder
  }

  export type PianificazioniSumOrderByAggregateInput = {
    id?: SortOrder
    myOrtoId?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type CredentialCreateNestedOneWithoutUserInput = {
    create?: XOR<CredentialCreateWithoutUserInput, CredentialUncheckedCreateWithoutUserInput>
    connectOrCreate?: CredentialCreateOrConnectWithoutUserInput
    connect?: CredentialWhereUniqueInput
  }

  export type MyOrtoCreateNestedManyWithoutUserInput = {
    create?: XOR<MyOrtoCreateWithoutUserInput, MyOrtoUncheckedCreateWithoutUserInput> | MyOrtoCreateWithoutUserInput[] | MyOrtoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MyOrtoCreateOrConnectWithoutUserInput | MyOrtoCreateOrConnectWithoutUserInput[]
    createMany?: MyOrtoCreateManyUserInputEnvelope
    connect?: MyOrtoWhereUniqueInput | MyOrtoWhereUniqueInput[]
  }

  export type CredentialUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<CredentialCreateWithoutUserInput, CredentialUncheckedCreateWithoutUserInput>
    connectOrCreate?: CredentialCreateOrConnectWithoutUserInput
    connect?: CredentialWhereUniqueInput
  }

  export type MyOrtoUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<MyOrtoCreateWithoutUserInput, MyOrtoUncheckedCreateWithoutUserInput> | MyOrtoCreateWithoutUserInput[] | MyOrtoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MyOrtoCreateOrConnectWithoutUserInput | MyOrtoCreateOrConnectWithoutUserInput[]
    createMany?: MyOrtoCreateManyUserInputEnvelope
    connect?: MyOrtoWhereUniqueInput | MyOrtoWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type CredentialUpdateOneWithoutUserNestedInput = {
    create?: XOR<CredentialCreateWithoutUserInput, CredentialUncheckedCreateWithoutUserInput>
    connectOrCreate?: CredentialCreateOrConnectWithoutUserInput
    upsert?: CredentialUpsertWithoutUserInput
    disconnect?: CredentialWhereInput | boolean
    delete?: CredentialWhereInput | boolean
    connect?: CredentialWhereUniqueInput
    update?: XOR<XOR<CredentialUpdateToOneWithWhereWithoutUserInput, CredentialUpdateWithoutUserInput>, CredentialUncheckedUpdateWithoutUserInput>
  }

  export type MyOrtoUpdateManyWithoutUserNestedInput = {
    create?: XOR<MyOrtoCreateWithoutUserInput, MyOrtoUncheckedCreateWithoutUserInput> | MyOrtoCreateWithoutUserInput[] | MyOrtoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MyOrtoCreateOrConnectWithoutUserInput | MyOrtoCreateOrConnectWithoutUserInput[]
    upsert?: MyOrtoUpsertWithWhereUniqueWithoutUserInput | MyOrtoUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MyOrtoCreateManyUserInputEnvelope
    set?: MyOrtoWhereUniqueInput | MyOrtoWhereUniqueInput[]
    disconnect?: MyOrtoWhereUniqueInput | MyOrtoWhereUniqueInput[]
    delete?: MyOrtoWhereUniqueInput | MyOrtoWhereUniqueInput[]
    connect?: MyOrtoWhereUniqueInput | MyOrtoWhereUniqueInput[]
    update?: MyOrtoUpdateWithWhereUniqueWithoutUserInput | MyOrtoUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MyOrtoUpdateManyWithWhereWithoutUserInput | MyOrtoUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MyOrtoScalarWhereInput | MyOrtoScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CredentialUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<CredentialCreateWithoutUserInput, CredentialUncheckedCreateWithoutUserInput>
    connectOrCreate?: CredentialCreateOrConnectWithoutUserInput
    upsert?: CredentialUpsertWithoutUserInput
    disconnect?: CredentialWhereInput | boolean
    delete?: CredentialWhereInput | boolean
    connect?: CredentialWhereUniqueInput
    update?: XOR<XOR<CredentialUpdateToOneWithWhereWithoutUserInput, CredentialUpdateWithoutUserInput>, CredentialUncheckedUpdateWithoutUserInput>
  }

  export type MyOrtoUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<MyOrtoCreateWithoutUserInput, MyOrtoUncheckedCreateWithoutUserInput> | MyOrtoCreateWithoutUserInput[] | MyOrtoUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MyOrtoCreateOrConnectWithoutUserInput | MyOrtoCreateOrConnectWithoutUserInput[]
    upsert?: MyOrtoUpsertWithWhereUniqueWithoutUserInput | MyOrtoUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MyOrtoCreateManyUserInputEnvelope
    set?: MyOrtoWhereUniqueInput | MyOrtoWhereUniqueInput[]
    disconnect?: MyOrtoWhereUniqueInput | MyOrtoWhereUniqueInput[]
    delete?: MyOrtoWhereUniqueInput | MyOrtoWhereUniqueInput[]
    connect?: MyOrtoWhereUniqueInput | MyOrtoWhereUniqueInput[]
    update?: MyOrtoUpdateWithWhereUniqueWithoutUserInput | MyOrtoUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MyOrtoUpdateManyWithWhereWithoutUserInput | MyOrtoUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MyOrtoScalarWhereInput | MyOrtoScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutCredentialsInput = {
    create?: XOR<UserCreateWithoutCredentialsInput, UserUncheckedCreateWithoutCredentialsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCredentialsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutCredentialsNestedInput = {
    create?: XOR<UserCreateWithoutCredentialsInput, UserUncheckedCreateWithoutCredentialsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCredentialsInput
    upsert?: UserUpsertWithoutCredentialsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCredentialsInput, UserUpdateWithoutCredentialsInput>, UserUncheckedUpdateWithoutCredentialsInput>
  }

  export type MyOrtoCreateNestedManyWithoutOrtaggioInput = {
    create?: XOR<MyOrtoCreateWithoutOrtaggioInput, MyOrtoUncheckedCreateWithoutOrtaggioInput> | MyOrtoCreateWithoutOrtaggioInput[] | MyOrtoUncheckedCreateWithoutOrtaggioInput[]
    connectOrCreate?: MyOrtoCreateOrConnectWithoutOrtaggioInput | MyOrtoCreateOrConnectWithoutOrtaggioInput[]
    createMany?: MyOrtoCreateManyOrtaggioInputEnvelope
    connect?: MyOrtoWhereUniqueInput | MyOrtoWhereUniqueInput[]
  }

  export type MyOrtoUncheckedCreateNestedManyWithoutOrtaggioInput = {
    create?: XOR<MyOrtoCreateWithoutOrtaggioInput, MyOrtoUncheckedCreateWithoutOrtaggioInput> | MyOrtoCreateWithoutOrtaggioInput[] | MyOrtoUncheckedCreateWithoutOrtaggioInput[]
    connectOrCreate?: MyOrtoCreateOrConnectWithoutOrtaggioInput | MyOrtoCreateOrConnectWithoutOrtaggioInput[]
    createMany?: MyOrtoCreateManyOrtaggioInputEnvelope
    connect?: MyOrtoWhereUniqueInput | MyOrtoWhereUniqueInput[]
  }

  export type MyOrtoUpdateManyWithoutOrtaggioNestedInput = {
    create?: XOR<MyOrtoCreateWithoutOrtaggioInput, MyOrtoUncheckedCreateWithoutOrtaggioInput> | MyOrtoCreateWithoutOrtaggioInput[] | MyOrtoUncheckedCreateWithoutOrtaggioInput[]
    connectOrCreate?: MyOrtoCreateOrConnectWithoutOrtaggioInput | MyOrtoCreateOrConnectWithoutOrtaggioInput[]
    upsert?: MyOrtoUpsertWithWhereUniqueWithoutOrtaggioInput | MyOrtoUpsertWithWhereUniqueWithoutOrtaggioInput[]
    createMany?: MyOrtoCreateManyOrtaggioInputEnvelope
    set?: MyOrtoWhereUniqueInput | MyOrtoWhereUniqueInput[]
    disconnect?: MyOrtoWhereUniqueInput | MyOrtoWhereUniqueInput[]
    delete?: MyOrtoWhereUniqueInput | MyOrtoWhereUniqueInput[]
    connect?: MyOrtoWhereUniqueInput | MyOrtoWhereUniqueInput[]
    update?: MyOrtoUpdateWithWhereUniqueWithoutOrtaggioInput | MyOrtoUpdateWithWhereUniqueWithoutOrtaggioInput[]
    updateMany?: MyOrtoUpdateManyWithWhereWithoutOrtaggioInput | MyOrtoUpdateManyWithWhereWithoutOrtaggioInput[]
    deleteMany?: MyOrtoScalarWhereInput | MyOrtoScalarWhereInput[]
  }

  export type MyOrtoUncheckedUpdateManyWithoutOrtaggioNestedInput = {
    create?: XOR<MyOrtoCreateWithoutOrtaggioInput, MyOrtoUncheckedCreateWithoutOrtaggioInput> | MyOrtoCreateWithoutOrtaggioInput[] | MyOrtoUncheckedCreateWithoutOrtaggioInput[]
    connectOrCreate?: MyOrtoCreateOrConnectWithoutOrtaggioInput | MyOrtoCreateOrConnectWithoutOrtaggioInput[]
    upsert?: MyOrtoUpsertWithWhereUniqueWithoutOrtaggioInput | MyOrtoUpsertWithWhereUniqueWithoutOrtaggioInput[]
    createMany?: MyOrtoCreateManyOrtaggioInputEnvelope
    set?: MyOrtoWhereUniqueInput | MyOrtoWhereUniqueInput[]
    disconnect?: MyOrtoWhereUniqueInput | MyOrtoWhereUniqueInput[]
    delete?: MyOrtoWhereUniqueInput | MyOrtoWhereUniqueInput[]
    connect?: MyOrtoWhereUniqueInput | MyOrtoWhereUniqueInput[]
    update?: MyOrtoUpdateWithWhereUniqueWithoutOrtaggioInput | MyOrtoUpdateWithWhereUniqueWithoutOrtaggioInput[]
    updateMany?: MyOrtoUpdateManyWithWhereWithoutOrtaggioInput | MyOrtoUpdateManyWithWhereWithoutOrtaggioInput[]
    deleteMany?: MyOrtoScalarWhereInput | MyOrtoScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutMyortiInput = {
    create?: XOR<UserCreateWithoutMyortiInput, UserUncheckedCreateWithoutMyortiInput>
    connectOrCreate?: UserCreateOrConnectWithoutMyortiInput
    connect?: UserWhereUniqueInput
  }

  export type OrtaggiCreateNestedOneWithoutMyortiInput = {
    create?: XOR<OrtaggiCreateWithoutMyortiInput, OrtaggiUncheckedCreateWithoutMyortiInput>
    connectOrCreate?: OrtaggiCreateOrConnectWithoutMyortiInput
    connect?: OrtaggiWhereUniqueInput
  }

  export type PianificazioniCreateNestedManyWithoutMyOrtoInput = {
    create?: XOR<PianificazioniCreateWithoutMyOrtoInput, PianificazioniUncheckedCreateWithoutMyOrtoInput> | PianificazioniCreateWithoutMyOrtoInput[] | PianificazioniUncheckedCreateWithoutMyOrtoInput[]
    connectOrCreate?: PianificazioniCreateOrConnectWithoutMyOrtoInput | PianificazioniCreateOrConnectWithoutMyOrtoInput[]
    createMany?: PianificazioniCreateManyMyOrtoInputEnvelope
    connect?: PianificazioniWhereUniqueInput | PianificazioniWhereUniqueInput[]
  }

  export type PianificazioniUncheckedCreateNestedManyWithoutMyOrtoInput = {
    create?: XOR<PianificazioniCreateWithoutMyOrtoInput, PianificazioniUncheckedCreateWithoutMyOrtoInput> | PianificazioniCreateWithoutMyOrtoInput[] | PianificazioniUncheckedCreateWithoutMyOrtoInput[]
    connectOrCreate?: PianificazioniCreateOrConnectWithoutMyOrtoInput | PianificazioniCreateOrConnectWithoutMyOrtoInput[]
    createMany?: PianificazioniCreateManyMyOrtoInputEnvelope
    connect?: PianificazioniWhereUniqueInput | PianificazioniWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutMyortiNestedInput = {
    create?: XOR<UserCreateWithoutMyortiInput, UserUncheckedCreateWithoutMyortiInput>
    connectOrCreate?: UserCreateOrConnectWithoutMyortiInput
    upsert?: UserUpsertWithoutMyortiInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMyortiInput, UserUpdateWithoutMyortiInput>, UserUncheckedUpdateWithoutMyortiInput>
  }

  export type OrtaggiUpdateOneRequiredWithoutMyortiNestedInput = {
    create?: XOR<OrtaggiCreateWithoutMyortiInput, OrtaggiUncheckedCreateWithoutMyortiInput>
    connectOrCreate?: OrtaggiCreateOrConnectWithoutMyortiInput
    upsert?: OrtaggiUpsertWithoutMyortiInput
    connect?: OrtaggiWhereUniqueInput
    update?: XOR<XOR<OrtaggiUpdateToOneWithWhereWithoutMyortiInput, OrtaggiUpdateWithoutMyortiInput>, OrtaggiUncheckedUpdateWithoutMyortiInput>
  }

  export type PianificazioniUpdateManyWithoutMyOrtoNestedInput = {
    create?: XOR<PianificazioniCreateWithoutMyOrtoInput, PianificazioniUncheckedCreateWithoutMyOrtoInput> | PianificazioniCreateWithoutMyOrtoInput[] | PianificazioniUncheckedCreateWithoutMyOrtoInput[]
    connectOrCreate?: PianificazioniCreateOrConnectWithoutMyOrtoInput | PianificazioniCreateOrConnectWithoutMyOrtoInput[]
    upsert?: PianificazioniUpsertWithWhereUniqueWithoutMyOrtoInput | PianificazioniUpsertWithWhereUniqueWithoutMyOrtoInput[]
    createMany?: PianificazioniCreateManyMyOrtoInputEnvelope
    set?: PianificazioniWhereUniqueInput | PianificazioniWhereUniqueInput[]
    disconnect?: PianificazioniWhereUniqueInput | PianificazioniWhereUniqueInput[]
    delete?: PianificazioniWhereUniqueInput | PianificazioniWhereUniqueInput[]
    connect?: PianificazioniWhereUniqueInput | PianificazioniWhereUniqueInput[]
    update?: PianificazioniUpdateWithWhereUniqueWithoutMyOrtoInput | PianificazioniUpdateWithWhereUniqueWithoutMyOrtoInput[]
    updateMany?: PianificazioniUpdateManyWithWhereWithoutMyOrtoInput | PianificazioniUpdateManyWithWhereWithoutMyOrtoInput[]
    deleteMany?: PianificazioniScalarWhereInput | PianificazioniScalarWhereInput[]
  }

  export type PianificazioniUncheckedUpdateManyWithoutMyOrtoNestedInput = {
    create?: XOR<PianificazioniCreateWithoutMyOrtoInput, PianificazioniUncheckedCreateWithoutMyOrtoInput> | PianificazioniCreateWithoutMyOrtoInput[] | PianificazioniUncheckedCreateWithoutMyOrtoInput[]
    connectOrCreate?: PianificazioniCreateOrConnectWithoutMyOrtoInput | PianificazioniCreateOrConnectWithoutMyOrtoInput[]
    upsert?: PianificazioniUpsertWithWhereUniqueWithoutMyOrtoInput | PianificazioniUpsertWithWhereUniqueWithoutMyOrtoInput[]
    createMany?: PianificazioniCreateManyMyOrtoInputEnvelope
    set?: PianificazioniWhereUniqueInput | PianificazioniWhereUniqueInput[]
    disconnect?: PianificazioniWhereUniqueInput | PianificazioniWhereUniqueInput[]
    delete?: PianificazioniWhereUniqueInput | PianificazioniWhereUniqueInput[]
    connect?: PianificazioniWhereUniqueInput | PianificazioniWhereUniqueInput[]
    update?: PianificazioniUpdateWithWhereUniqueWithoutMyOrtoInput | PianificazioniUpdateWithWhereUniqueWithoutMyOrtoInput[]
    updateMany?: PianificazioniUpdateManyWithWhereWithoutMyOrtoInput | PianificazioniUpdateManyWithWhereWithoutMyOrtoInput[]
    deleteMany?: PianificazioniScalarWhereInput | PianificazioniScalarWhereInput[]
  }

  export type MyOrtoCreateNestedOneWithoutPianificazioniInput = {
    create?: XOR<MyOrtoCreateWithoutPianificazioniInput, MyOrtoUncheckedCreateWithoutPianificazioniInput>
    connectOrCreate?: MyOrtoCreateOrConnectWithoutPianificazioniInput
    connect?: MyOrtoWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type MyOrtoUpdateOneRequiredWithoutPianificazioniNestedInput = {
    create?: XOR<MyOrtoCreateWithoutPianificazioniInput, MyOrtoUncheckedCreateWithoutPianificazioniInput>
    connectOrCreate?: MyOrtoCreateOrConnectWithoutPianificazioniInput
    upsert?: MyOrtoUpsertWithoutPianificazioniInput
    connect?: MyOrtoWhereUniqueInput
    update?: XOR<XOR<MyOrtoUpdateToOneWithWhereWithoutPianificazioniInput, MyOrtoUpdateWithoutPianificazioniInput>, MyOrtoUncheckedUpdateWithoutPianificazioniInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type CredentialCreateWithoutUserInput = {
    password: string
  }

  export type CredentialUncheckedCreateWithoutUserInput = {
    password: string
  }

  export type CredentialCreateOrConnectWithoutUserInput = {
    where: CredentialWhereUniqueInput
    create: XOR<CredentialCreateWithoutUserInput, CredentialUncheckedCreateWithoutUserInput>
  }

  export type MyOrtoCreateWithoutUserInput = {
    nome: string
    citta: string
    numeroPiante: number
    dataSemina: string
    sistemazione: string
    ortaggio: OrtaggiCreateNestedOneWithoutMyortiInput
    pianificazioni?: PianificazioniCreateNestedManyWithoutMyOrtoInput
  }

  export type MyOrtoUncheckedCreateWithoutUserInput = {
    id?: number
    nome: string
    citta: string
    tipoPiantagione: string
    numeroPiante: number
    dataSemina: string
    sistemazione: string
    pianificazioni?: PianificazioniUncheckedCreateNestedManyWithoutMyOrtoInput
  }

  export type MyOrtoCreateOrConnectWithoutUserInput = {
    where: MyOrtoWhereUniqueInput
    create: XOR<MyOrtoCreateWithoutUserInput, MyOrtoUncheckedCreateWithoutUserInput>
  }

  export type MyOrtoCreateManyUserInputEnvelope = {
    data: MyOrtoCreateManyUserInput | MyOrtoCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type CredentialUpsertWithoutUserInput = {
    update: XOR<CredentialUpdateWithoutUserInput, CredentialUncheckedUpdateWithoutUserInput>
    create: XOR<CredentialCreateWithoutUserInput, CredentialUncheckedCreateWithoutUserInput>
    where?: CredentialWhereInput
  }

  export type CredentialUpdateToOneWithWhereWithoutUserInput = {
    where?: CredentialWhereInput
    data: XOR<CredentialUpdateWithoutUserInput, CredentialUncheckedUpdateWithoutUserInput>
  }

  export type CredentialUpdateWithoutUserInput = {
    password?: StringFieldUpdateOperationsInput | string
  }

  export type CredentialUncheckedUpdateWithoutUserInput = {
    password?: StringFieldUpdateOperationsInput | string
  }

  export type MyOrtoUpsertWithWhereUniqueWithoutUserInput = {
    where: MyOrtoWhereUniqueInput
    update: XOR<MyOrtoUpdateWithoutUserInput, MyOrtoUncheckedUpdateWithoutUserInput>
    create: XOR<MyOrtoCreateWithoutUserInput, MyOrtoUncheckedCreateWithoutUserInput>
  }

  export type MyOrtoUpdateWithWhereUniqueWithoutUserInput = {
    where: MyOrtoWhereUniqueInput
    data: XOR<MyOrtoUpdateWithoutUserInput, MyOrtoUncheckedUpdateWithoutUserInput>
  }

  export type MyOrtoUpdateManyWithWhereWithoutUserInput = {
    where: MyOrtoScalarWhereInput
    data: XOR<MyOrtoUpdateManyMutationInput, MyOrtoUncheckedUpdateManyWithoutUserInput>
  }

  export type MyOrtoScalarWhereInput = {
    AND?: MyOrtoScalarWhereInput | MyOrtoScalarWhereInput[]
    OR?: MyOrtoScalarWhereInput[]
    NOT?: MyOrtoScalarWhereInput | MyOrtoScalarWhereInput[]
    id?: IntFilter<"MyOrto"> | number
    nome?: StringFilter<"MyOrto"> | string
    citta?: StringFilter<"MyOrto"> | string
    tipoPiantagione?: StringFilter<"MyOrto"> | string
    numeroPiante?: IntFilter<"MyOrto"> | number
    dataSemina?: StringFilter<"MyOrto"> | string
    sistemazione?: StringFilter<"MyOrto"> | string
    userId?: IntFilter<"MyOrto"> | number
  }

  export type UserCreateWithoutCredentialsInput = {
    firstName: string
    lastName: string
    email: string
    myorti?: MyOrtoCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCredentialsInput = {
    id?: number
    firstName: string
    lastName: string
    email: string
    myorti?: MyOrtoUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCredentialsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCredentialsInput, UserUncheckedCreateWithoutCredentialsInput>
  }

  export type UserUpsertWithoutCredentialsInput = {
    update: XOR<UserUpdateWithoutCredentialsInput, UserUncheckedUpdateWithoutCredentialsInput>
    create: XOR<UserCreateWithoutCredentialsInput, UserUncheckedCreateWithoutCredentialsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCredentialsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCredentialsInput, UserUncheckedUpdateWithoutCredentialsInput>
  }

  export type UserUpdateWithoutCredentialsInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    myorti?: MyOrtoUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCredentialsInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    myorti?: MyOrtoUncheckedUpdateManyWithoutUserNestedInput
  }

  export type MyOrtoCreateWithoutOrtaggioInput = {
    nome: string
    citta: string
    numeroPiante: number
    dataSemina: string
    sistemazione: string
    user: UserCreateNestedOneWithoutMyortiInput
    pianificazioni?: PianificazioniCreateNestedManyWithoutMyOrtoInput
  }

  export type MyOrtoUncheckedCreateWithoutOrtaggioInput = {
    id?: number
    nome: string
    citta: string
    numeroPiante: number
    dataSemina: string
    sistemazione: string
    userId: number
    pianificazioni?: PianificazioniUncheckedCreateNestedManyWithoutMyOrtoInput
  }

  export type MyOrtoCreateOrConnectWithoutOrtaggioInput = {
    where: MyOrtoWhereUniqueInput
    create: XOR<MyOrtoCreateWithoutOrtaggioInput, MyOrtoUncheckedCreateWithoutOrtaggioInput>
  }

  export type MyOrtoCreateManyOrtaggioInputEnvelope = {
    data: MyOrtoCreateManyOrtaggioInput | MyOrtoCreateManyOrtaggioInput[]
    skipDuplicates?: boolean
  }

  export type MyOrtoUpsertWithWhereUniqueWithoutOrtaggioInput = {
    where: MyOrtoWhereUniqueInput
    update: XOR<MyOrtoUpdateWithoutOrtaggioInput, MyOrtoUncheckedUpdateWithoutOrtaggioInput>
    create: XOR<MyOrtoCreateWithoutOrtaggioInput, MyOrtoUncheckedCreateWithoutOrtaggioInput>
  }

  export type MyOrtoUpdateWithWhereUniqueWithoutOrtaggioInput = {
    where: MyOrtoWhereUniqueInput
    data: XOR<MyOrtoUpdateWithoutOrtaggioInput, MyOrtoUncheckedUpdateWithoutOrtaggioInput>
  }

  export type MyOrtoUpdateManyWithWhereWithoutOrtaggioInput = {
    where: MyOrtoScalarWhereInput
    data: XOR<MyOrtoUpdateManyMutationInput, MyOrtoUncheckedUpdateManyWithoutOrtaggioInput>
  }

  export type UserCreateWithoutMyortiInput = {
    firstName: string
    lastName: string
    email: string
    credentials?: CredentialCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutMyortiInput = {
    id?: number
    firstName: string
    lastName: string
    email: string
    credentials?: CredentialUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutMyortiInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMyortiInput, UserUncheckedCreateWithoutMyortiInput>
  }

  export type OrtaggiCreateWithoutMyortiInput = {
    nome: string
    periodoColtivazione: string
    esposizione: string
    tempiMaturazione: number
    tipoTerreno: string
    distanzaPiantagione: string
    profonditaSemina: string
    temperaturaMin: string
    temperaturaMax: string
    frequenzaInnaffiatura: number
    note: string
  }

  export type OrtaggiUncheckedCreateWithoutMyortiInput = {
    nome: string
    periodoColtivazione: string
    esposizione: string
    tempiMaturazione: number
    tipoTerreno: string
    distanzaPiantagione: string
    profonditaSemina: string
    temperaturaMin: string
    temperaturaMax: string
    frequenzaInnaffiatura: number
    note: string
  }

  export type OrtaggiCreateOrConnectWithoutMyortiInput = {
    where: OrtaggiWhereUniqueInput
    create: XOR<OrtaggiCreateWithoutMyortiInput, OrtaggiUncheckedCreateWithoutMyortiInput>
  }

  export type PianificazioniCreateWithoutMyOrtoInput = {
    data: string
    attivita: string
    completata: boolean
  }

  export type PianificazioniUncheckedCreateWithoutMyOrtoInput = {
    id?: number
    data: string
    attivita: string
    completata: boolean
  }

  export type PianificazioniCreateOrConnectWithoutMyOrtoInput = {
    where: PianificazioniWhereUniqueInput
    create: XOR<PianificazioniCreateWithoutMyOrtoInput, PianificazioniUncheckedCreateWithoutMyOrtoInput>
  }

  export type PianificazioniCreateManyMyOrtoInputEnvelope = {
    data: PianificazioniCreateManyMyOrtoInput | PianificazioniCreateManyMyOrtoInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutMyortiInput = {
    update: XOR<UserUpdateWithoutMyortiInput, UserUncheckedUpdateWithoutMyortiInput>
    create: XOR<UserCreateWithoutMyortiInput, UserUncheckedCreateWithoutMyortiInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMyortiInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMyortiInput, UserUncheckedUpdateWithoutMyortiInput>
  }

  export type UserUpdateWithoutMyortiInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    credentials?: CredentialUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMyortiInput = {
    id?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    credentials?: CredentialUncheckedUpdateOneWithoutUserNestedInput
  }

  export type OrtaggiUpsertWithoutMyortiInput = {
    update: XOR<OrtaggiUpdateWithoutMyortiInput, OrtaggiUncheckedUpdateWithoutMyortiInput>
    create: XOR<OrtaggiCreateWithoutMyortiInput, OrtaggiUncheckedCreateWithoutMyortiInput>
    where?: OrtaggiWhereInput
  }

  export type OrtaggiUpdateToOneWithWhereWithoutMyortiInput = {
    where?: OrtaggiWhereInput
    data: XOR<OrtaggiUpdateWithoutMyortiInput, OrtaggiUncheckedUpdateWithoutMyortiInput>
  }

  export type OrtaggiUpdateWithoutMyortiInput = {
    nome?: StringFieldUpdateOperationsInput | string
    periodoColtivazione?: StringFieldUpdateOperationsInput | string
    esposizione?: StringFieldUpdateOperationsInput | string
    tempiMaturazione?: IntFieldUpdateOperationsInput | number
    tipoTerreno?: StringFieldUpdateOperationsInput | string
    distanzaPiantagione?: StringFieldUpdateOperationsInput | string
    profonditaSemina?: StringFieldUpdateOperationsInput | string
    temperaturaMin?: StringFieldUpdateOperationsInput | string
    temperaturaMax?: StringFieldUpdateOperationsInput | string
    frequenzaInnaffiatura?: IntFieldUpdateOperationsInput | number
    note?: StringFieldUpdateOperationsInput | string
  }

  export type OrtaggiUncheckedUpdateWithoutMyortiInput = {
    nome?: StringFieldUpdateOperationsInput | string
    periodoColtivazione?: StringFieldUpdateOperationsInput | string
    esposizione?: StringFieldUpdateOperationsInput | string
    tempiMaturazione?: IntFieldUpdateOperationsInput | number
    tipoTerreno?: StringFieldUpdateOperationsInput | string
    distanzaPiantagione?: StringFieldUpdateOperationsInput | string
    profonditaSemina?: StringFieldUpdateOperationsInput | string
    temperaturaMin?: StringFieldUpdateOperationsInput | string
    temperaturaMax?: StringFieldUpdateOperationsInput | string
    frequenzaInnaffiatura?: IntFieldUpdateOperationsInput | number
    note?: StringFieldUpdateOperationsInput | string
  }

  export type PianificazioniUpsertWithWhereUniqueWithoutMyOrtoInput = {
    where: PianificazioniWhereUniqueInput
    update: XOR<PianificazioniUpdateWithoutMyOrtoInput, PianificazioniUncheckedUpdateWithoutMyOrtoInput>
    create: XOR<PianificazioniCreateWithoutMyOrtoInput, PianificazioniUncheckedCreateWithoutMyOrtoInput>
  }

  export type PianificazioniUpdateWithWhereUniqueWithoutMyOrtoInput = {
    where: PianificazioniWhereUniqueInput
    data: XOR<PianificazioniUpdateWithoutMyOrtoInput, PianificazioniUncheckedUpdateWithoutMyOrtoInput>
  }

  export type PianificazioniUpdateManyWithWhereWithoutMyOrtoInput = {
    where: PianificazioniScalarWhereInput
    data: XOR<PianificazioniUpdateManyMutationInput, PianificazioniUncheckedUpdateManyWithoutMyOrtoInput>
  }

  export type PianificazioniScalarWhereInput = {
    AND?: PianificazioniScalarWhereInput | PianificazioniScalarWhereInput[]
    OR?: PianificazioniScalarWhereInput[]
    NOT?: PianificazioniScalarWhereInput | PianificazioniScalarWhereInput[]
    id?: IntFilter<"Pianificazioni"> | number
    data?: StringFilter<"Pianificazioni"> | string
    attivita?: StringFilter<"Pianificazioni"> | string
    completata?: BoolFilter<"Pianificazioni"> | boolean
    myOrtoId?: IntFilter<"Pianificazioni"> | number
  }

  export type MyOrtoCreateWithoutPianificazioniInput = {
    nome: string
    citta: string
    numeroPiante: number
    dataSemina: string
    sistemazione: string
    user: UserCreateNestedOneWithoutMyortiInput
    ortaggio: OrtaggiCreateNestedOneWithoutMyortiInput
  }

  export type MyOrtoUncheckedCreateWithoutPianificazioniInput = {
    id?: number
    nome: string
    citta: string
    tipoPiantagione: string
    numeroPiante: number
    dataSemina: string
    sistemazione: string
    userId: number
  }

  export type MyOrtoCreateOrConnectWithoutPianificazioniInput = {
    where: MyOrtoWhereUniqueInput
    create: XOR<MyOrtoCreateWithoutPianificazioniInput, MyOrtoUncheckedCreateWithoutPianificazioniInput>
  }

  export type MyOrtoUpsertWithoutPianificazioniInput = {
    update: XOR<MyOrtoUpdateWithoutPianificazioniInput, MyOrtoUncheckedUpdateWithoutPianificazioniInput>
    create: XOR<MyOrtoCreateWithoutPianificazioniInput, MyOrtoUncheckedCreateWithoutPianificazioniInput>
    where?: MyOrtoWhereInput
  }

  export type MyOrtoUpdateToOneWithWhereWithoutPianificazioniInput = {
    where?: MyOrtoWhereInput
    data: XOR<MyOrtoUpdateWithoutPianificazioniInput, MyOrtoUncheckedUpdateWithoutPianificazioniInput>
  }

  export type MyOrtoUpdateWithoutPianificazioniInput = {
    nome?: StringFieldUpdateOperationsInput | string
    citta?: StringFieldUpdateOperationsInput | string
    numeroPiante?: IntFieldUpdateOperationsInput | number
    dataSemina?: StringFieldUpdateOperationsInput | string
    sistemazione?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutMyortiNestedInput
    ortaggio?: OrtaggiUpdateOneRequiredWithoutMyortiNestedInput
  }

  export type MyOrtoUncheckedUpdateWithoutPianificazioniInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    citta?: StringFieldUpdateOperationsInput | string
    tipoPiantagione?: StringFieldUpdateOperationsInput | string
    numeroPiante?: IntFieldUpdateOperationsInput | number
    dataSemina?: StringFieldUpdateOperationsInput | string
    sistemazione?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type MyOrtoCreateManyUserInput = {
    id?: number
    nome: string
    citta: string
    tipoPiantagione: string
    numeroPiante: number
    dataSemina: string
    sistemazione: string
  }

  export type MyOrtoUpdateWithoutUserInput = {
    nome?: StringFieldUpdateOperationsInput | string
    citta?: StringFieldUpdateOperationsInput | string
    numeroPiante?: IntFieldUpdateOperationsInput | number
    dataSemina?: StringFieldUpdateOperationsInput | string
    sistemazione?: StringFieldUpdateOperationsInput | string
    ortaggio?: OrtaggiUpdateOneRequiredWithoutMyortiNestedInput
    pianificazioni?: PianificazioniUpdateManyWithoutMyOrtoNestedInput
  }

  export type MyOrtoUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    citta?: StringFieldUpdateOperationsInput | string
    tipoPiantagione?: StringFieldUpdateOperationsInput | string
    numeroPiante?: IntFieldUpdateOperationsInput | number
    dataSemina?: StringFieldUpdateOperationsInput | string
    sistemazione?: StringFieldUpdateOperationsInput | string
    pianificazioni?: PianificazioniUncheckedUpdateManyWithoutMyOrtoNestedInput
  }

  export type MyOrtoUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    citta?: StringFieldUpdateOperationsInput | string
    tipoPiantagione?: StringFieldUpdateOperationsInput | string
    numeroPiante?: IntFieldUpdateOperationsInput | number
    dataSemina?: StringFieldUpdateOperationsInput | string
    sistemazione?: StringFieldUpdateOperationsInput | string
  }

  export type MyOrtoCreateManyOrtaggioInput = {
    id?: number
    nome: string
    citta: string
    numeroPiante: number
    dataSemina: string
    sistemazione: string
    userId: number
  }

  export type MyOrtoUpdateWithoutOrtaggioInput = {
    nome?: StringFieldUpdateOperationsInput | string
    citta?: StringFieldUpdateOperationsInput | string
    numeroPiante?: IntFieldUpdateOperationsInput | number
    dataSemina?: StringFieldUpdateOperationsInput | string
    sistemazione?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutMyortiNestedInput
    pianificazioni?: PianificazioniUpdateManyWithoutMyOrtoNestedInput
  }

  export type MyOrtoUncheckedUpdateWithoutOrtaggioInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    citta?: StringFieldUpdateOperationsInput | string
    numeroPiante?: IntFieldUpdateOperationsInput | number
    dataSemina?: StringFieldUpdateOperationsInput | string
    sistemazione?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    pianificazioni?: PianificazioniUncheckedUpdateManyWithoutMyOrtoNestedInput
  }

  export type MyOrtoUncheckedUpdateManyWithoutOrtaggioInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    citta?: StringFieldUpdateOperationsInput | string
    numeroPiante?: IntFieldUpdateOperationsInput | number
    dataSemina?: StringFieldUpdateOperationsInput | string
    sistemazione?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type PianificazioniCreateManyMyOrtoInput = {
    id?: number
    data: string
    attivita: string
    completata: boolean
  }

  export type PianificazioniUpdateWithoutMyOrtoInput = {
    data?: StringFieldUpdateOperationsInput | string
    attivita?: StringFieldUpdateOperationsInput | string
    completata?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PianificazioniUncheckedUpdateWithoutMyOrtoInput = {
    id?: IntFieldUpdateOperationsInput | number
    data?: StringFieldUpdateOperationsInput | string
    attivita?: StringFieldUpdateOperationsInput | string
    completata?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PianificazioniUncheckedUpdateManyWithoutMyOrtoInput = {
    id?: IntFieldUpdateOperationsInput | number
    data?: StringFieldUpdateOperationsInput | string
    attivita?: StringFieldUpdateOperationsInput | string
    completata?: BoolFieldUpdateOperationsInput | boolean
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OrtaggiCountOutputTypeDefaultArgs instead
     */
    export type OrtaggiCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OrtaggiCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MyOrtoCountOutputTypeDefaultArgs instead
     */
    export type MyOrtoCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MyOrtoCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CredentialDefaultArgs instead
     */
    export type CredentialArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CredentialDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OrtaggiDefaultArgs instead
     */
    export type OrtaggiArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OrtaggiDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GlossarioDefaultArgs instead
     */
    export type GlossarioArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GlossarioDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MyOrtoDefaultArgs instead
     */
    export type MyOrtoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MyOrtoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PianificazioniDefaultArgs instead
     */
    export type PianificazioniArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PianificazioniDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}